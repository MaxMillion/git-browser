{"refs":{"refs/heads/master":"f1c77934ba9f24ffaad0e22f7a58c9cfcb70fdef","refs/tags/0.0.1":"77e6a69ef39c7490de0f59e866f61cc316fa4923","refs/tags/0.0.2":"3857a9a2d4fe5d622c5d17d921a8729b248bb4aa","refs/tags/0.0.3":"495a64731cd05725c4a94990e454e79876537b4d","refs/tags/0.1.0":"f1c77934ba9f24ffaad0e22f7a58c9cfcb70fdef"},"objects":{"f1c77934ba9f24ffaad0e22f7a58c9cfcb70fdef":{"type":"commit","body":{"tree":"ed0b0419a734372c7a08dd0ec8f42b15e504fcbd","parents":["495a64731cd05725c4a94990e454e79876537b4d"],"author":"Tim Caswell <tim@creationix.com> 1373154309 -0500","committer":"Tim Caswell <tim@creationix.com> 1373154309 -0500","message":"Simplify interface error handling.  No error inputs and throw on output\n"}},"495a64731cd05725c4a94990e454e79876537b4d":{"type":"commit","body":{"tree":"4fbb831ac5e49cc8f3a7f7ecf93c3b734b6b6246","parents":["5c25a9c1cd82a2d0f00ec470885eb12cd21356ac"],"author":"Tim Caswell <tim@creationix.com> 1373047549 -0500","committer":"Tim Caswell <tim@creationix.com> 1373047549 -0500","message":"Forward extra arguments through\n"}},"3857a9a2d4fe5d622c5d17d921a8729b248bb4aa":{"type":"commit","body":{"tree":"f1e395c42a71f2d4a46cb3ff0f518a63f681a0c7","parents":["77e6a69ef39c7490de0f59e866f61cc316fa4923"],"author":"Tim Caswell <tim@creationix.com> 1372881793 -0500","committer":"Tim Caswell <tim@creationix.com> 1372881793 -0500","message":"Optimize transform to not use readQueue\n"}},"77e6a69ef39c7490de0f59e866f61cc316fa4923":{"type":"commit","body":{"tree":"6b488e71525bf198b7f1494ca07f2646ae8f80c9","parents":["a31b6bc8d1233fc30a0aef6ad985b4444856962c"],"author":"Tim Caswell <tim@creationix.com> 1372818857 -0500","committer":"Tim Caswell <tim@creationix.com> 1372818857 -0500","message":"Package for npm\n"}},"5c25a9c1cd82a2d0f00ec470885eb12cd21356ac":{"type":"commit","body":{"tree":"4bafa0a389460c29db41e254e4f5107be80355ad","parents":["3857a9a2d4fe5d622c5d17d921a8729b248bb4aa"],"author":"Tim Caswell <tim@creationix.com> 1372882043 -0500","committer":"Tim Caswell <tim@creationix.com> 1372882043 -0500","message":"Add docs\n"}},"a31b6bc8d1233fc30a0aef6ad985b4444856962c":{"type":"commit","body":{"tree":"25813ca237736876e980afc3bc4cd84a26927c3c","parents":["84ba12b8c4696008a5d47b0d551fa9a1ead4eee3"],"author":"Tim Caswell <tim@creationix.com> 1372795963 -0500","committer":"Tim Caswell <tim@creationix.com> 1372795963 -0500","message":"Add initial implementation\n"}},"84ba12b8c4696008a5d47b0d551fa9a1ead4eee3":{"type":"commit","body":{"tree":"4444e64be433eb4bbf182787d69ea71edcdb0ff4","author":"Tim Caswell <tim@creationix.com> 1372553247 -0700","committer":"Tim Caswell <tim@creationix.com> 1372553247 -0700","message":"Initial commit\n"}},"ed0b0419a734372c7a08dd0ec8f42b15e504fcbd":{"type":"tree","body":[{"mode":33188,"name":"README.md","hash":"d6ce7cc3df54eb0a42f3ea264c0a449c1d013fba"},{"mode":33188,"name":"package.json","hash":"cca62655d422b7e98dc570f752e84936bedf41df"},{"mode":33188,"name":"test.js","hash":"9c905cd71f4f0bec271a77dafce3441bf20463c6"},{"mode":33188,"name":"transform.js","hash":"b3000e07893a03763f87f05c424b496c07d815c4"}]},"4bafa0a389460c29db41e254e4f5107be80355ad":{"type":"tree","body":[{"mode":33188,"name":"README.md","hash":"6d476138fcc2ded7d05a4ca027d9d2cf50c41e67"},{"mode":33188,"name":"package.json","hash":"b13507592ded2b5ee6285d189b1e5c792cbaf69c"},{"mode":33188,"name":"test.js","hash":"59d5eb3f5c35d86ec6b397ef1b4bcc119763832b"},{"mode":33188,"name":"transform.js","hash":"fc3b27f0f702f67c068d2ee85d15e8fb8eeb2081"}]},"6b488e71525bf198b7f1494ca07f2646ae8f80c9":{"type":"tree","body":[{"mode":33188,"name":"README.md","hash":"60fc73d687d0935a8d739f3991ad91d20dcb9ed6"},{"mode":33188,"name":"package.json","hash":"3f521cc0326658c3e4ac8a78a91008a5487a0f5e"},{"mode":33188,"name":"test.js","hash":"59d5eb3f5c35d86ec6b397ef1b4bcc119763832b"},{"mode":33188,"name":"transform.js","hash":"a8b92759734e3ce720c7372e23ca76d77a412a66"}]},"4444e64be433eb4bbf182787d69ea71edcdb0ff4":{"type":"tree","body":[{"mode":33188,"name":"README.md","hash":"60fc73d687d0935a8d739f3991ad91d20dcb9ed6"}]},"6d476138fcc2ded7d05a4ca027d9d2cf50c41e67":{"type":"blob","body":"push-to-pull\n============\n\nConvert a push-filter to a pull-filter (for simple streams)\n\nUsage is simple.  Define your filter as an `(emit) -> emit` transform where `emit` is `(err, item)`.  Then when you need an `(stream) -> stream` filter, use this module to convert it.\n\n```js\nvar pushToPull = require('push-to-pull');\n\n// Dumb filter that inputs numbers and outputs that many monkeys\n// Encoded as an (emit) -> emit transform filter.\nfunction pushFilter(emit) {\n  return function (err, item) {\n    if (item === undefined) return emit(err);\n    for (var i = 1; i <= item; i++) {\n      emit(null, \"MONKEY \" + i);\n    }  \n  }\n}\n\n// Same filter, but as a (stream) -> stream transform filter\nvar pullFilter = pushToPull(pushFilter);\n```\n"},"e29ae3f19b5db780c90bf1a0cc2a58f02383d0af":{"type":"blob","body":"{\n  \"name\": \"push-to-pull\",\n  \"version\": \"0.0.3\",\n  \"description\": \"Convert a push-filter to a pull-filter (for simple streams)\",\n  \"main\": \"transform.js\",\n  \"scripts\": {\n    \"test\": \"node test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/push-to-pull.git\"\n  },\n  \"keywords\": [\n    \"simple-stream\",\n    \"push-filter\",\n    \"stream\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"readmeFilename\": \"README.md\",\n  \"gitHead\": \"a31b6bc8d1233fc30a0aef6ad985b4444856962c\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/push-to-pull/issues\"\n  }\n}\n"},"59d5eb3f5c35d86ec6b397ef1b4bcc119763832b":{"type":"blob","body":"var pushToPull = require('./.');\n\n// Create a stream that counts from 1 to infinity and emits the numbers after a\n// short delay specefied by `ms`.\n\n// source(ms) -> stream<num>\nfunction source(ms) {\n  var i = 0;\n  var done = false;\n  return { read: read, abort: abort };\n  \n  function read(callback) {\n    if (done) return callback();\n    var n = ++i;\n    setTimeout(function () {\n      callback(null, n);\n    }, ms);\n  }\n  \n  function abort(callback) {\n    done = true;\n    callback();\n  }\n}\n\n// Consume a stream for at least num items and then tell upstream we're done\n// with it.  Wait for the end event and report the events in a continuable.\n// sink(stream<num>, maxNum) -> continuable<nums>\nfunction sink(stream, num) {\n  var items = [];\n\n  var finish;\n  return function (callback) {\n    var done = false;\n    // Hide the real callback so that it can only be called once.\n    finish = function (err, items) {\n      if (done) return;\n      done = true;\n      callback(err, items);\n    };\n    stream.read(onRead);\n  };\n  \n  function onRead(err, item) {\n    // When the end is reached, resolve the continuable\n    if (item === undefined) return finish(err, items);\n    // Check to see if we've got enough\n    if (items.length >= num) {\n      stream.abort(onAbort);\n      return finish(null, items);\n    }\n    else {\n      items.push(item);\n      stream.read(onRead);\n    }\n  }\n  \n  function onAbort(err) {\n    if (err) return finish(err);\n  }\n}\n\nvar filter = pushToPull(function (emit) {\n  return function (err, item) {\n    if (item === undefined) return emit(err);\n    emit(null, item);\n    emit(null, \"extra\");\n  }\n});\n\nvar stream = source(16);\nstream = filter(stream);\nsink(stream, 10)(function (err, items) {\n  if (err) throw err;\n  console.log(items);\n});"},"b3000e07893a03763f87f05c424b496c07d815c4":{"type":"blob","body":"// input push-filter: (emit) -> emit\n// output is simple-stream pull-filter: (stream) -> stream\nmodule.exports = pushToPull;\nfunction pushToPull(parser) {\n  return function (stream) {\n  \n    var write = parser(onData);\n    var cb = null;\n    var queue = [];\n      \n    return { read: read, abort: stream.abort };\n    \n    function read(callback) {\n      if (queue.length) return callback(null, queue.shift());\n      if (cb) return callback(new Error(\"Only one read at a time.\"));\n      cb = callback;\n      stream.read(onRead);\n      \n    }\n\n    function onRead(err, item) {\n      var callback = cb;\n      cb = null;\n      if (err) return callback(err);\n      try {\n        write(item);\n      }\n      catch (err) {\n        return callback(err);\n      }\n      return read(callback);\n    }\n\n    function onData(item) {\n      queue.push(item);\n    }\n\n  };\n}\n"},"fc3b27f0f702f67c068d2ee85d15e8fb8eeb2081":{"type":"blob","body":"// input push-filter: (emit) -> emit\n// output is simple-stream pull-filter: (stream) -> stream\nmodule.exports = pushToPull;\nfunction pushToPull(pushFilter) {\n  return function (stream) {\n    var queue = [];\n    var output = null;\n    var done = false;\n\n    var emit = pushFilter(onEmit);\n\n    return { read: read, abort: stream.abort };\n\n    function read(callback) {\n      if (done) return callback();\n      if (queue.length) {\n        return callback.apply(null, queue.shift());\n      }\n      if (output) return callback(new Error(\"Only one read allowed at a time\"));\n      output = callback;\n      stream.read(emit);\n    }\n\n    function onEmit(err, item) {\n      if (output) {\n        var callback = output;\n        output = null;\n        callback(err, item);\n      }\n      else {\n        queue.push(arguments);\n      }\n    }\n\n  };\n}\n"},"a8b92759734e3ce720c7372e23ca76d77a412a66":{"type":"blob","body":"// input push-filter: (emit) -> emit\n// output is simple-stream pull-filter: (stream) -> stream\nmodule.exports = pushToPull;\nfunction pushToPull(pushFilter) {\n  return function (stream) {\n    var dataQueue = [];\n    var readQueue = [];\n    var reading = false;\n    var done = false;\n\n    var emit = pushFilter(onEmit);\n\n    return { read: read, abort: stream.abort };\n\n    function read(callback) {\n      if (done) return callback();\n      readQueue.push(callback);\n      check();\n    }\n\n    function check() {\n      while (readQueue.length && dataQueue.length) {\n        var data = dataQueue.shift();\n        readQueue.shift().apply(null, data);\n        if (data[1] === undefined) done = true;\n      }\n\n      while (done && readQueue.length) {\n        readQueue.shift()();\n      }\n\n      if (reading || !readQueue.length) return;\n      reading = true;\n      stream.read(onRead);\n    }\n\n    function onRead(err, item) {\n      reading = false;\n      emit(err, item);\n      check();\n    }\n\n    function onEmit() {\n      dataQueue.push(arguments);\n      check();\n    }\n\n  };\n}\n"},"25813ca237736876e980afc3bc4cd84a26927c3c":{"type":"tree","body":[{"mode":33188,"name":"README.md","hash":"60fc73d687d0935a8d739f3991ad91d20dcb9ed6"},{"mode":33188,"name":"transform.js","hash":"a8b92759734e3ce720c7372e23ca76d77a412a66"}]},"f1e395c42a71f2d4a46cb3ff0f518a63f681a0c7":{"type":"tree","body":[{"mode":33188,"name":"README.md","hash":"60fc73d687d0935a8d739f3991ad91d20dcb9ed6"},{"mode":33188,"name":"package.json","hash":"b13507592ded2b5ee6285d189b1e5c792cbaf69c"},{"mode":33188,"name":"test.js","hash":"59d5eb3f5c35d86ec6b397ef1b4bcc119763832b"},{"mode":33188,"name":"transform.js","hash":"fc3b27f0f702f67c068d2ee85d15e8fb8eeb2081"}]},"0a97fffc65ac2d079dbebf8617681ebe6ad583d3":{"type":"blob","body":"// input push-filter: (emit) -> emit\n// output is simple-stream pull-filter: (stream) -> stream\nmodule.exports = pushToPull;\nfunction pushToPull(pushFilter) {\n  return function (stream) {\n    var extras = Array.prototype.slice.call(arguments, 1);\n    var queue = [];\n    var output = null;\n    var done = false;\n\n    var emit = pushFilter.apply(null, [onEmit].concat(extras));\n\n    return { read: read, abort: stream.abort };\n\n    function read(callback) {\n      if (done) return callback();\n      if (queue.length) {\n        return callback.apply(null, queue.shift());\n      }\n      if (output) return callback(new Error(\"Only one read allowed at a time\"));\n      output = callback;\n      stream.read(emit);\n    }\n\n    function onEmit(err, item) {\n      if (output) {\n        var callback = output;\n        output = null;\n        callback(err, item);\n      }\n      else {\n        queue.push(arguments);\n      }\n    }\n\n  };\n}\n"},"4fbb831ac5e49cc8f3a7f7ecf93c3b734b6b6246":{"type":"tree","body":[{"mode":33188,"name":"README.md","hash":"6d476138fcc2ded7d05a4ca027d9d2cf50c41e67"},{"mode":33188,"name":"package.json","hash":"e29ae3f19b5db780c90bf1a0cc2a58f02383d0af"},{"mode":33188,"name":"test.js","hash":"59d5eb3f5c35d86ec6b397ef1b4bcc119763832b"},{"mode":33188,"name":"transform.js","hash":"0a97fffc65ac2d079dbebf8617681ebe6ad583d3"}]},"9c905cd71f4f0bec271a77dafce3441bf20463c6":{"type":"blob","body":"var pushToPull = require('./.');\n\n// Create a stream that counts from 1 to infinity and emits the numbers after a\n// short delay specefied by `ms`.\n\n// source(ms) -> stream<num>\nfunction source(ms) {\n  var i = 0;\n  var done = false;\n  return { read: read, abort: abort };\n  \n  function read(callback) {\n    if (done) return callback();\n    var n = ++i;\n    setTimeout(function () {\n      callback(null, n);\n    }, ms);\n  }\n  \n  function abort(callback) {\n    done = true;\n    callback();\n  }\n}\n\n// Consume a stream for at least num items and then tell upstream we're done\n// with it.  Wait for the end event and report the events in a continuable.\n// sink(stream<num>, maxNum) -> continuable<nums>\nfunction sink(stream, num) {\n  var items = [];\n\n  var finish;\n  return function (callback) {\n    var done = false;\n    // Hide the real callback so that it can only be called once.\n    finish = function (err, items) {\n      if (done) return;\n      done = true;\n      callback(err, items);\n    };\n    stream.read(onRead);\n  };\n  \n  function onRead(err, item) {\n    // When the end is reached, resolve the continuable\n    if (item === undefined) return finish(err, items);\n    // Check to see if we've got enough\n    if (items.length >= num) {\n      stream.abort(onAbort);\n      return finish(null, items);\n    }\n    else {\n      items.push(item);\n      stream.read(onRead);\n    }\n  }\n  \n  function onAbort(err) {\n    if (err) return finish(err);\n  }\n}\n\nvar filter = pushToPull(function (emit) {\n  return function (item) {\n    if (item === undefined) return emit();\n    emit(item);\n    emit(\"extra\");\n  }\n});\n\nvar stream = source(16);\nstream = filter(stream);\nsink(stream, 10)(function (err, items) {\n  if (err) throw err;\n  console.log(items);\n});"},"3f521cc0326658c3e4ac8a78a91008a5487a0f5e":{"type":"blob","body":"{\n  \"name\": \"push-to-pull\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Convert a push-filter to a pull-filter (for simple streams)\",\n  \"main\": \"transform.js\",\n  \"scripts\": {\n    \"test\": \"node test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/push-to-pull.git\"\n  },\n  \"keywords\": [\n    \"simple-stream\",\n    \"push-filter\",\n    \"stream\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"readmeFilename\": \"README.md\",\n  \"gitHead\": \"a31b6bc8d1233fc30a0aef6ad985b4444856962c\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/push-to-pull/issues\"\n  }\n}\n"},"b13507592ded2b5ee6285d189b1e5c792cbaf69c":{"type":"blob","body":"{\n  \"name\": \"push-to-pull\",\n  \"version\": \"0.0.2\",\n  \"description\": \"Convert a push-filter to a pull-filter (for simple streams)\",\n  \"main\": \"transform.js\",\n  \"scripts\": {\n    \"test\": \"node test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/push-to-pull.git\"\n  },\n  \"keywords\": [\n    \"simple-stream\",\n    \"push-filter\",\n    \"stream\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"readmeFilename\": \"README.md\",\n  \"gitHead\": \"a31b6bc8d1233fc30a0aef6ad985b4444856962c\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/push-to-pull/issues\"\n  }\n}\n"},"cca62655d422b7e98dc570f752e84936bedf41df":{"type":"blob","body":"{\n  \"name\": \"push-to-pull\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Convert a push-filter to a pull-filter (for simple streams)\",\n  \"main\": \"transform.js\",\n  \"scripts\": {\n    \"test\": \"node test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/push-to-pull.git\"\n  },\n  \"keywords\": [\n    \"simple-stream\",\n    \"push-filter\",\n    \"stream\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"readmeFilename\": \"README.md\",\n  \"gitHead\": \"a31b6bc8d1233fc30a0aef6ad985b4444856962c\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/push-to-pull/issues\"\n  }\n}\n"},"60fc73d687d0935a8d739f3991ad91d20dcb9ed6":{"type":"blob","body":"push-to-pull\n============\n\nConvert a push-filter to a pull-filter (for simple streams)\n"},"d6ce7cc3df54eb0a42f3ea264c0a449c1d013fba":{"type":"blob","body":"push-to-pull\n============\n\nConvert a push-filter to a pull-filter (for simple streams)\n\nUsage is simple.  Define your filter as an `(emit) -> emit` transform where `emit` is `(err, item)`.  Then when you need an `(stream) -> stream` filter, use this module to convert it.\n\n```js\nvar pushToPull = require('push-to-pull');\n\n// Dumb filter that inputs numbers and outputs that many monkeys\n// Encoded as an (emit) -> emit transform filter.\nfunction pushFilter(emit) {\n  return function (item) {\n    if (item === undefined) return emit();\n    for (var i = 1; i <= item; i++) {\n      emit(\"MONKEY \" + i);\n    }  \n  }\n}\n\n// Same filter, but as a (stream) -> stream transform filter\nvar pullFilter = pushToPull(pushFilter);\n```\n"}}}