{"refs":{"refs/heads/master":"fa72b06541bdb344c78f4127d787d1471a629153","refs/tags/0.1.0":"813b36f2ad39fe6bdd6a22d70f8b3362e5829b50","refs/tags/0.2.0":"4976a5d58c31e226291608ae6a1fa24dc9a5f4a0","refs/tags/0.2.1":"656f1f6d96397c6a9ac6627cdb243247eb3b31ed","refs/tags/0.2.2":"1f1e60ecb9f196cf6a408d2521e6fe5ea6713f82","refs/tags/0.2.3":"2ee617c055b088fd0f7c04c56af3deafb057deac"},"objects":{"fa72b06541bdb344c78f4127d787d1471a629153":{"type":"commit","body":{"tree":"bdf1be2067cd3ed85baef5eec5ec0542b5d4290d","parents":["65da4a775c956b0781f88997ebdaa5226327fe20"],"author":"Tim Caswell <tim@creationix.com> 1376320337 -0500","committer":"Tim Caswell <tim@creationix.com> 1376320337 -0500","message":"Use cleaner interface for json and msgpack codecs\n"}},"65da4a775c956b0781f88997ebdaa5226327fe20":{"type":"commit","body":{"tree":"0a01fab267e8ebadfd2863d41f2777b536a6f5e1","parents":["2ee617c055b088fd0f7c04c56af3deafb057deac"],"author":"Tim Caswell <tim@creationix.com> 1376099622 -0500","committer":"Tim Caswell <tim@creationix.com> 1376099622 -0500","message":"Use a better default filename\n"}},"2ee617c055b088fd0f7c04c56af3deafb057deac":{"type":"commit","body":{"tree":"f5ea3e944f01733f968dc4fa28eecdfe158ffa45","parents":["cd77ea4a4b6c386a280d4c8aeb20b2b52c24efe2"],"author":"Tim Caswell <tim@creationix.com> 1376099001 -0500","committer":"Tim Caswell <tim@creationix.com> 1376099001 -0500","message":"Bump version to 0.2.3\n"}},"1f1e60ecb9f196cf6a408d2521e6fe5ea6713f82":{"type":"commit","body":{"tree":"0e21155c9f623316dda67fea79945de9b3c6095c","parents":["656f1f6d96397c6a9ac6627cdb243247eb3b31ed"],"author":"Tim Caswell <tim@creationix.com> 1376093333 -0500","committer":"Tim Caswell <tim@creationix.com> 1376093333 -0500","message":"Fix playing back gzipped streams\n"}},"656f1f6d96397c6a9ac6627cdb243247eb3b31ed":{"type":"commit","body":{"tree":"c626fdf7081bc4f27896b4ea4ccb1199d4fc5aa8","parents":["67e7a22eb9515f4b54863547e6f342262f51835f"],"author":"Tim Caswell <tim@creationix.com> 1376092494 -0500","committer":"Tim Caswell <tim@creationix.com> 1376092494 -0500","message":"Bump version to 0.2.1\n"}},"4976a5d58c31e226291608ae6a1fa24dc9a5f4a0":{"type":"commit","body":{"tree":"23709fbab9d0bbf1c7d76024b071e9920d5d7065","parents":["813b36f2ad39fe6bdd6a22d70f8b3362e5829b50"],"author":"Tim Caswell <tim@creationix.com> 1376091946 -0500","committer":"Tim Caswell <tim@creationix.com> 1376091946 -0500","message":"Convert to streaming format.  Bump to 0.2.0\n"}},"813b36f2ad39fe6bdd6a22d70f8b3362e5829b50":{"type":"commit","body":{"tree":"5747baec98aab66f20422a6fdafcb0ee17727382","parents":["cbe863e55438c5b59c092e25024bd1294c326e71"],"author":"Tim Caswell <tim@creationix.com> 1376083229 -0500","committer":"Tim Caswell <tim@creationix.com> 1376083229 -0500","message":"First version 0.1.0\n"}},"cd77ea4a4b6c386a280d4c8aeb20b2b52c24efe2":{"type":"commit","body":{"tree":"8c7343c259415a2ac73a12e7018023afdd3f0041","parents":["636bc4578bfc1dfb241fe3ca89cbdd7af46d8f70"],"author":"Tim Caswell <tim@creationix.com> 1376098993 -0500","committer":"Tim Caswell <tim@creationix.com> 1376098993 -0500","message":"Clean up options and add playing from stdin\n"}},"636bc4578bfc1dfb241fe3ca89cbdd7af46d8f70":{"type":"commit","body":{"tree":"c3e2a79f35c6b3321f1d00726be0cd13569ee386","parents":["1f1e60ecb9f196cf6a408d2521e6fe5ea6713f82"],"author":"Tim Caswell <tim@creationix.com> 1376094758 -0500","committer":"Tim Caswell <tim@creationix.com> 1376094758 -0500","message":"Fix streaming recording end event\n"}},"67e7a22eb9515f4b54863547e6f342262f51835f":{"type":"commit","body":{"tree":"fc87a423c27296c6e09476b45ca82487742f6d15","parents":["78aa00bdb869d04b31ac2beb3be91842214231ca"],"author":"Tim Caswell <tim@creationix.com> 1376092472 -0500","committer":"Tim Caswell <tim@creationix.com> 1376092472 -0500","message":"Allow streaming out\n"}},"78aa00bdb869d04b31ac2beb3be91842214231ca":{"type":"commit","body":{"tree":"e3ae6e9500ca6994485979e5065aa0c752a24ae4","parents":["422b95cf322faa733e63f42c1a85154ad0071e2e"],"author":"Tim Caswell <tim@creationix.com> 1376091946 -0500","committer":"Tim Caswell <tim@creationix.com> 1376091963 -0500","message":"Convert to streaming format.  Bump to 0.2.0\n"}},"422b95cf322faa733e63f42c1a85154ad0071e2e":{"type":"commit","body":{"tree":"c185b1f4f039cf6935e89fb974d7aac7bb906c52","parents":["4180e5fd9905984ca15e0ad9ed4585ba168f5bb8"],"author":"Tim Caswell <tim@creationix.com> 1376083384 -0500","committer":"Tim Caswell <tim@creationix.com> 1376083384 -0500","message":"Update README.md"}},"4180e5fd9905984ca15e0ad9ed4585ba168f5bb8":{"type":"commit","body":{"tree":"d3cbfaaf3a325c12852ccc7774228a6d4bd15cb2","parents":["813b36f2ad39fe6bdd6a22d70f8b3362e5829b50"],"author":"Tim Caswell <tim@creationix.com> 1376083290 -0500","committer":"Tim Caswell <tim@creationix.com> 1376083290 -0500","message":"Update README.md"}},"cbe863e55438c5b59c092e25024bd1294c326e71":{"type":"commit","body":{"tree":"8c28c621213cb6373ac71dd624edee5d7731cf0d","parents":["2a8c2e914bc60fe2a5d25582aead5b60cf6e5957"],"author":"Tim Caswell <tim@creationix.com> 1376079067 -0500","committer":"Tim Caswell <tim@creationix.com> 1376079067 -0500","message":"Remvoe debug lines\n"}},"2a8c2e914bc60fe2a5d25582aead5b60cf6e5957":{"type":"commit","body":{"tree":"b815223e0d180cb9cec268a7c994822873395077","parents":["4d87c1265185ca24eb7dbb0a890dd37b813793bc"],"author":"Tim Caswell <tim@creationix.com> 1376078807 -0500","committer":"Tim Caswell <tim@creationix.com> 1376078807 -0500","message":"Implement recorder\n"}},"4d87c1265185ca24eb7dbb0a890dd37b813793bc":{"type":"commit","body":{"tree":"63bfd340b278b0ba87363575881880f0dd256371","parents":["f20de58a2b2dd257fc84a413c8463911fa6080cc"],"author":"Tim Caswell <tim@creationix.com> 1376075681 -0500","committer":"Tim Caswell <tim@creationix.com> 1376075681 -0500","message":"Split command out from args\n"}},"f20de58a2b2dd257fc84a413c8463911fa6080cc":{"type":"commit","body":{"tree":"b3c2be325e4c062fc180a7e8c5c7f806167d7b84","parents":["5998a09594927d7834f0ba3b49f68c980796cdd2"],"author":"Tim Caswell <tim@creationix.com> 1376075356 -0500","committer":"Tim Caswell <tim@creationix.com> 1376075356 -0500","message":"Implement tiny option parser\n"}},"5998a09594927d7834f0ba3b49f68c980796cdd2":{"type":"commit","body":{"tree":"973772f6c421e60cbf92a631b4bc2976b010eaa5","parents":["de20d502a4f2812a93d43f3f45d96fbc0d99d855"],"author":"Tim Caswell <tim@creationix.com> 1376074076 -0500","committer":"Tim Caswell <tim@creationix.com> 1376074076 -0500","message":"Add package.json\n"}},"de20d502a4f2812a93d43f3f45d96fbc0d99d855":{"type":"commit","body":{"tree":"621e676fdc1c90caf8cf347bc928911f15b3975f","parents":["b57d4af46d8326b1ac571c0860c13194f78afecb"],"author":"Tim Caswell <tim@creationix.com> 1376073974 -0500","committer":"Tim Caswell <tim@creationix.com> 1376073974 -0500","message":"Update LICENSE"}},"b57d4af46d8326b1ac571c0860c13194f78afecb":{"type":"commit","body":{"tree":"33a79b2fa5bdeba510e8601b6338da3bfd30569b","author":"Tim Caswell <tim@creationix.com> 1376073954 -0700","committer":"Tim Caswell <tim@creationix.com> 1376073954 -0700","message":"Initial commit\n"}},"0a01fab267e8ebadfd2863d41f2777b536a6f5e1":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"e00e4a02975905d6d732f2d9ab7832fb2ecc6282"},{"mode":33188,"name":"jsonMachine.js","hash":"25ac88270593332e051cad7047a73f41f6a31035"},{"mode":33188,"name":"msgpackMachine.js","hash":"40e2d5f4819e2e3c3303ea9f768855835ccf5e70"},{"mode":33188,"name":"package.json","hash":"465f1fcf600f52f93acbe9589a6ecdd8904ec1e7"},{"mode":33188,"name":"play.js","hash":"cf68e2731eb6632336717e8b5a4aa240f301f3ac"},{"mode":33261,"name":"rec.js","hash":"724f231ad46532d3c41f9f2958bfc54ac5858fd9"},{"mode":33188,"name":"record.js","hash":"45ed64039aa42ef4c406e268387f7c3c92ae0b93"}]},"23709fbab9d0bbf1c7d76024b071e9920d5d7065":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"415fcf359a4496aa3a7b2b9fa63743e58f9efd68"},{"mode":33188,"name":"jsonMachine.js","hash":"25ac88270593332e051cad7047a73f41f6a31035"},{"mode":33188,"name":"msgpackMachine.js","hash":"40e2d5f4819e2e3c3303ea9f768855835ccf5e70"},{"mode":33188,"name":"package.json","hash":"b4e4ce0da7bd799a5be5977d90244f73fee040e5"},{"mode":33188,"name":"play.js","hash":"007a1b768dad6a3532a792618326f057eaecb85e"},{"mode":33261,"name":"rec.js","hash":"01895a99812d8d1c45e0cc18bc58085f0595fe80"},{"mode":33188,"name":"record.js","hash":"b81cd43e2e300e794f4cc2c6496fa815de4194f1"}]},"5747baec98aab66f20422a6fdafcb0ee17727382":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"415fcf359a4496aa3a7b2b9fa63743e58f9efd68"},{"mode":33188,"name":"package.json","hash":"019e41a779a047558a8973170dc13c193d671959"},{"mode":33188,"name":"play.js","hash":"3b9b1f2611e66591a0520ee46cac886290226750"},{"mode":33261,"name":"rec.js","hash":"e067633c0a74d12e0de012abc2935a63293856f0"},{"mode":33188,"name":"record.js","hash":"dde726f0b8a18902b8611d8adcbe5a5379bcbc11"}]},"8c28c621213cb6373ac71dd624edee5d7731cf0d":{"type":"tree","body":[{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"6ab9d6f84b659913507128245474af75591945fe"},{"mode":33188,"name":"package.json","hash":"8e3be7c4109e1a316f2eadacc80eca3299ef119e"},{"mode":33261,"name":"rec.js","hash":"6be01ecca6c82d1afc4c2d3e36b6ec54dedb5f04"}]},"63bfd340b278b0ba87363575881880f0dd256371":{"type":"tree","body":[{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"6ab9d6f84b659913507128245474af75591945fe"},{"mode":33188,"name":"package.json","hash":"2c391ad1d3a9f5770960ae393781dfcb72375e62"},{"mode":33188,"name":"rec.js","hash":"e5afa8b0271c88215653e0a46d354cfc758d356c"}]},"973772f6c421e60cbf92a631b4bc2976b010eaa5":{"type":"tree","body":[{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"6ab9d6f84b659913507128245474af75591945fe"},{"mode":33188,"name":"package.json","hash":"bcca2216e84063b20229a12a94bc1f11bb923c02"},{"mode":33188,"name":"rec.js","hash":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"}]},"33a79b2fa5bdeba510e8601b6338da3bfd30569b":{"type":"tree","body":[{"mode":33188,"name":"LICENSE","hash":"303728246fc1680647fc43c3c5fe6ae2fcbebd10"},{"mode":33188,"name":"README.md","hash":"6ab9d6f84b659913507128245474af75591945fe"}]},"3c3629e647f5ddf82548912e337bea9826b434af":{"type":"blob","body":"node_modules\n"},"b3afc61d9bc521c8b80454608abc8582f18add83":{"type":"blob","body":"The MIT License (MIT)\n\nCopyright (c) 2013 Tim Caswell <tim@creationix.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"},"e00e4a02975905d6d732f2d9ab7832fb2ecc6282":{"type":"blob","body":"rec\n===\n\nA tool for recording CLI programs and posting their output.\n\nTo install, first install [node.js][] and then `npm install -g rec`.\n\n## Instructions\n\n```\n> rec\n\n  Usage:  rec [options] command [args...]\n\n  Options:\n\n    -m --msgpack     Output MsgPack format (default)\n    -j --json        Output JSON format\n    -g --gzip        Gzip output\n    -p --play        Play back a recording\n    -q --quiet       Suppress message at end\n    --name=filename  File to save to (default is 'out')\n\n```\n\n## Record a Terminalcast\n\n```\n> rec my program\n```\n\n## Play Back a Terminalcast\n\n```\n> rec --play rec.msgpack\n```\n\n[node.js]: http://nodejs.org/\n"},"50dd3498568164b7f088e1e91a80c09bfd361bdb":{"type":"blob","body":"// Input is JSON serializable values, output is a stream of newline delimited JSON values.\nexports.encoder = encoder;\nfunction encoder(emit) {\n  return function (item) {\n    emit(JSON.stringify(item) + \"\\n\");\n  };\n}\n\n// Input is an arbitrarly sized text chunk, output is JSON parsed values.\nexports.decoder = decoder;\nfunction decoder(emit) {\n  var json = \"\";\n  return function (chunk) {\n    var start = 0;\n    for (var i = 0, l = chunk.length; i < l; i++) {\n      if (chunk[i] === \"\\n\") {\n        if (i > start) {\n          json += chunk.substr(start, i - start);\n        }\n        if (json) {\n          emit(JSON.parse(json));\n          json = \"\";\n        }\n        start = i + 1;\n      }\n    }\n    if (start < l) {\n      json += chunk.substr(start);\n    }\n  };\n}\n\n"},"0447d132b227ea953a75504d17e803c024d256e3":{"type":"blob","body":"var encode = require('msgpack-js').encode;\nvar decode = require('msgpack-js').decode;\n\nexports.encoder = encoder;\nfunction encoder(emit) {\n  return function (item) {\n    var chunk = encode(item);\n    var bytes = [];\n    var length = chunk.length;\n    while (length > 0x7f) {\n      bytes.push(length & 0x7f | 0x80);\n      length >>= 7;\n    }\n    bytes.push(length & 0x7f);\n    emit(new Buffer(bytes));\n    emit(chunk);\n  };\n}\n\nexports.decoder = decoder;\nfunction decoder(emit) {\n  var left = 0;\n  var offset = 0;\n  var parts = null;\n  return function (chunk) {\n    for (var i = 0, l = chunk.length; i < l; i++) {\n      if (parts === null) {\n        var byte = chunk[i];\n        left |= (byte & 0x7f) << offset;\n        offset += 7;\n        if (!(byte & 0x80)) parts = [];\n      }\n      else {\n        var len = Math.min(l - i, left);\n        parts.push(chunk.slice(i, i + len));\n        left -= len;\n        i += len - 1;\n        if (!left) {\n          var item = decode(Buffer.concat(parts));\n          parts = null;\n          offset = 0;\n          emit(item);\n        }\n      }\n    }\n  };\n}\n\n"},"2c391ad1d3a9f5770960ae393781dfcb72375e62":{"type":"blob","body":"{\n  \"name\": \"rec\",\n  \"version\": \"0.0.0\",\n  \"description\": \"A tool for recording CLI programs and posting their output.\",\n  \"main\": \"rec.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/rec.git\"\n  },\n  \"keywords\": [\n    \"record\",\n    \"terminal\",\n    \"post\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/rec/issues\"\n  },\n  \"dependencies\": {\n    \"msgpack-js\": \"~0.3.0\"\n  }\n}\n"},"947312a68ab316cf7084be2a9a499aed2e4b07f4":{"type":"blob","body":"\nmodule.exports = function (options, path) {\n\n  var file;\n  if (!path) {\n    options.stream = true;\n    file = process.stdin;\n  }\n  else {\n    file = require('fs').createReadStream(path);\n    if (path.substr(path.length - 3) === \".gz\") {\n      path = path.substr(0, path.length - 3);\n      options.gzip = true;\n    }\n    if (path.substr(path.length - 5) === \".json\" && options.json === undefined) {\n      options.json = true;\n    }\n    if (path.substr(path.length - 8) === \".msgpack\" && options.msgpack === undefined) {\n      options.msgpack = true;\n    }\n  }\n  if (options.msgpack) options.format = \"msgpack\";\n  if (options.json) options.format = \"json\";\n  if (!options.format) throw new Error(\"Please specify an input encoding\");\n\n  var input = file;\n  if (options.gzip) {\n    var input = require('zlib').createGunzip();\n    file.pipe(input);\n  }\n\n  var decoder;\n  if (options.format === \"json\") {\n    decoder = require('./json.js').decoder;\n    input.setEncoding('utf8');\n  }\n  else {\n    decoder = require('./msgpack.js').decoder;\n  }\n\n  if (options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n  var target = Date.now();\n  var queue = [];\n  var delay = 0;\n  var done = false;\n  var waiting = null;\n  var meta;\n  input.on(\"data\", decoder(function (item) {\n    if (delay === null) {\n      delay = item;\n      return;\n    }\n    queue.push([delay, item]);\n    delay = null;\n    check();\n  }));\n  input.on(\"end\", function () {\n    done = true;\n    check();\n  });\n\n  function check() {\n    var delta, next;\n    while (!waiting && (next = queue.shift())) {\n      target += next[0];\n      delta = target - Date.now();\n      if (delta <= 0) {\n        run(next[1]);\n      }\n      else {\n        waiting = next[1];\n        setTimeout(resume, delta);\n      }\n    }\n    if (done && !waiting && !next) {\n      finish();\n    }\n  }\n\n  function resume() {\n    var item = waiting;\n    waiting = null;\n    run(item);\n    check();\n  }\n\n  function run(items) {\n    for (var i = 0, l = items.length; i < l; i += 2) {\n      var type = items[i];\n      var item = items[i + 1];\n      if (type === 1) process.stdout.write(item);\n      else if (type === 2) process.stderr.write(item);\n      else if (type === 0) meta = item;\n      else if (type === 3) meta.exit = item;\n    }\n  }\n\n  function finish() {\n    if (!options.quiet) {\n      console.error(\"\\nFinished\", meta)\n    }\n  }\n}\n"},"724f231ad46532d3c41f9f2958bfc54ac5858fd9":{"type":"blob","body":"#!/usr/bin/env node\n\n// Extract options, command, and args\nvar options, command, args;\n(function () {\n  // Strip out the options and the commands to be run.\n  var first = 2;\n  for (var i = 2, l = process.argv.length; i < l; i++) {\n    if (process.argv[i][0] === '-') first = i + 1;\n    else break;\n  }\n  args = process.argv.slice(first);\n  command = args.shift();\n  // Ultra simple option parser\n  var table = {\n    j: \"json\", m: \"msgpack\", g: \"gzip\", p: \"play\", q: \"quiet\", c: \"clear\", s: \"stream\"\n  };\n  options = {};\n  process.argv.slice(2, first).forEach(function (option) {\n    var match;\n    if (match = option.match(/^--([a-z0-9][a-z0-9_-]+)(?:=(.*))?$/i)) {\n      options[match[1]] = match[2] || true;\n    }\n    else if (match = option.match(/^-([a-z0-9]+)$/i)) {\n      var letters = match[1];\n      for (var i = 0, l = letters.length; i < l; i++) {\n        var option = table[letters[i]];\n        if (!option) throw new SyntaxError(\"Invalid short option '\" + letters[i] + \"'\");\n        options[option] = true;\n      }\n    }\n    else {\n      throw new SyntaxError(\"Malformed option: \" + JSON.stringify(option));\n    }\n  });\n}());\n\nif (!(command || options.play)) {\n  console.error(\"\\n  Usage:  rec [options] command [args...]\\n\");\n  console.error(\"  Common Options:\\n\");\n  console.error(\"    -j --json        Output JSON format (default)\");\n  console.error(\"    -m --msgpack     Output MsgPack format\");\n  console.error(\"    -g --gzip        Gzip output\");\n  console.error(\"    -q --quiet       Suppress message at end\");\n  console.error(\"    -c --clear       Clear screen before starting\");\n  console.error(\"    -s --stream      Stream data to stdout or from stdin\");\n  console.error(\"\\n  Recording Options:\\n\");\n  console.error(\"    --name=filename  File to save to (default is 'out')\");\n  console.error(\"\\n  Playback Options:\\n\");\n  console.error(\"    -p --play        Play back a recording (required)\");\n  console.error();\n  process.exit(-1);\n}\n\nif (options.play) {\n  require('./play.js')(options, command);\n}\nelse {\n  require('./record.js')(options, command, args);\n}\n\n"},"45ed64039aa42ef4c406e268387f7c3c92ae0b93":{"type":"blob","body":"var childProcess = require('child_process');\nvar fs = require('fs');\n\nfunction uleb128(num) {\n\n  var bytes = [];\n  while (num > 0x7f) {\n    bytes.push((num & 0x7f) | 0x80);\n    num >>= 7;\n  }\n  bytes.push(num);\n  return new Buffer(bytes);\n}\n\nmodule.exports = function (options, command, args) {\n  if (options.msgpack) options.format = \"msgpack\";\n  else options.format = \"json\";\n\n  var path = options.name || command + \"-\" + Date.now().toString(36);\n  if (options.format === \"json\") path += \".json\";\n  else path += \".msgpack\";\n  if (options.gzip) path += \".gz\";\n\n  var file;\n  if (options.stream) {\n    file = process.stdout;\n  }\n  else {\n    file = fs.createWriteStream(path);\n  }\n  var output = file;\n\n  var write;\n  if (options.format === \"msgpack\") {\n    // uleb128 length header framed msgpack\n    var msgpack = require('msgpack-js');\n    write = function (item) {\n      var serialized = msgpack.encode(item);\n\n      output.write(uleb128(serialized.length));\n      return output.write(serialized);\n    };\n  }\n  else {\n    // Newline framed JSON\n    write = function (item) {\n      return output.write(JSON.stringify(item) + \"\\n\");\n    };\n  }\n  if (options.gzip) {\n    var output = require('zlib').createGzip();\n    output.pipe(file);\n  }\n  // Erase screen and move home\n  if (options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n\n  var child = childProcess.spawn(command, args, {\n    stdio: [0, 'pipe', 'pipe']\n  });\n  if (options.format === \"json\") {\n    child.stdout.setEncoding('utf8');\n    child.stderr.setEncoding('utf8');\n  }\n  child.stdout.on(\"data\", function (chunk) {\n    record(1, chunk);\n    if (!options.stream) {\n      process.stdout.write(chunk);\n    }\n  });\n  child.stderr.on(\"data\", function (chunk) {\n    record(2, chunk);\n    process.stderr.write(chunk);\n  });\n\n  // Forward basic signals to child.\n  process.on('SIGINT', function () { child.kill('SIGINT'); });\n  process.on('SIGTERM', function () { child.kill('SIGTERM'); });\n\n  var left = 2;\n  child.on('exit', function (code, signal) {\n    record(3, { code: code, signal: signal });\n\n  });\n\n  child.on('close', function () {\n    write(current);\n    if (!options.stream) {\n      output.end();\n      if (!(options.quiet)) {\n        console.error();\n        console.error(\"Recording written to \" + path);\n      }\n    }\n  });\n\n  var last = Date.now();\n  var current = [];\n  record(0, {\n    start: last,\n    command: command,\n    args: args,\n    platform: process.platform,\n    arch: process.arch\n  });\n\n  function record(event, value) {\n    var time = Date.now();\n    if (time !== last) {\n      write(current);\n      var delta = time - last;\n      write(delta);\n      last = time;\n      current = [];\n    }\n    current.push(event, value);\n  }\n\n};\n"},"25ac88270593332e051cad7047a73f41f6a31035":{"type":"blob","body":"// A streaming byte oriented JSON parser.  Feed it a single byte at a time and\n// it will emit complete objects as it comes across them.  Whitespace within and\n// between objects is ignored.  This means it can parse newline delimited JSON.\nfunction jsonMachine(emit, next) {\n  next = next || $value;\n  return $value;\n\n  function $value(byte) {\n    if (!byte) return;\n    if (byte === 0x09 || byte === 0x0a || byte === 0x0d || byte === 0x20) {\n      return $value; // Ignore whitespace\n    }\n    if (byte === 0x22) { // \"\n      return stringMachine(onValue);\n    }\n    if (byte === 0x2d || (byte >= 0x30 && byte < 0x40)) { // - or 0-9\n      return numberMachine(byte, onNumber);\n    }\n    if (byte === 0x7b) { // {\n      return objectMachine(onValue);\n    }\n    if (byte === 0x5b) { // [\n      return arrayMachine(onValue);\n    }\n    if (byte === 0x74) { // t\n      return constantMachine(TRUE, true, onValue);\n    }\n    if (byte === 0x66) { // f\n      return constantMachine(FALSE, false, onValue);\n    }\n    if (byte === 0x6e) { // n\n      return constantMachine(NULL, null, onValue);\n    }\n    if (next === $value) {\n      throw new Error(\"Unexpected 0x\" + byte.toString(16));\n    }\n    return next(byte);\n  }\n\n  function onValue(value) {\n    emit(value);\n    return next;\n  }\n\n  function onNumber(number, byte) {\n    emit(number);\n    return $value(byte);\n  }\n\n}\n\nvar TRUE = [0x72, 0x75, 0x65];\nvar FALSE = [0x61, 0x6c, 0x73, 0x65];\nvar NULL = [0x75, 0x6c, 0x6c];\n\nfunction constantMachine(bytes, value, emit) {\n  var i = 0, l = bytes.length;\n  return $constant;\n\n  function $constant(byte) {\n    if (byte !== bytes[i++]) {\n      throw new Error(\"Unexpected 0x\" + byte.toString(16));\n    }\n    if (i < l) return $constant;\n    return emit(value);\n  }\n}\n\nfunction stringMachine(emit) {\n  var string = \"\";\n  return $string;\n\n  function $string(byte) {\n    if (byte === 0x22) { // \"\n      return emit(string);\n    }\n    if (byte === 0x5c) { // \\\n      return $escapedString;\n    }\n    if (byte & 0x80) { // UTF-8 handling\n      return utf8Machine(byte, onCharCode);\n    }\n    if (byte < 0x20) { // ASCII control character\n      throw new Error(\"Unexpected control character: 0x\" + byte.toString(16));\n    }\n    string += String.fromCharCode(byte);\n    return $string;\n  }\n\n  function $escapedString(byte) {\n    if (byte === 0x22 || byte === 0x5c || byte === 0x2f) { // \" \\ /\n      string += String.fromCharCode(byte);\n      return $string;\n    }\n    if (byte === 0x62) { // b\n      string += \"\\b\";\n      return $string;\n    }\n    if (byte === 0x66) { // f\n      string += \"\\f\";\n      return $string;\n    }\n    if (byte === 0x6e) { // n\n      string += \"\\n\";\n      return $string;\n    }\n    if (byte === 0x72) { // r\n      string += \"\\r\";\n      return $string;\n    }\n    if (byte === 0x74) { // t\n      string += \"\\t\";\n      return $string;\n    }\n    if (byte === 0x75) { // u\n      return hexMachine(onCharCode);\n    }\n  }\n\n  function onCharCode(charCode) {\n    string += String.fromCharCode(charCode);\n    return $string;\n  }\n\n}\n\n// Nestable state machine for UTF-8 Decoding.\nfunction utf8Machine(byte, emit) {\n\n  var left = 0, num = 0;\n\n  if (byte >= 0xc0 && byte < 0xe0) { // 2-byte UTF-8 Character\n    left = 1;\n    num = (byte & 0x1f) << 6;\n    return $utf8;\n  }\n  if (byte >= 0xe0 && byte < 0xf0) { // 3-byte UTF-8 Character\n    left = 2;\n    num = (byte & 0xf) << 12;\n    return $utf8;\n  }\n  if (byte >= 0xf0 && byte < 0xf8) { // 4-byte UTF-8 Character\n    left = 3;\n    num = (byte & 0x07) << 18;\n    return $utf8;\n  }\n  throw new Error(\"Invalid byte in UTF-8 string: 0x\" + byte.toString(16));\n\n  function $utf8(byte) {\n    if ((byte & 0xc0) !== 0x80) {\n      throw new Error(\"Invalid byte in UTF-8 character: 0x\" + byte.toString(16));\n    }\n    num |= (byte & 0x3f) << (--left * 6);\n    if (left) return $utf8;\n    return emit(num);\n  }\n\n}\n\n// Nestable state machine for hex escaped characters\nfunction hexMachine(emit) {\n  var left = 4, num = 0;\n\n  return $hex;\n\n  function $hex(byte) {\n    var i = 0; // Parse the hex byte\n    if (byte >= 0x30 && byte < 0x40) i = byte - 0x30;\n    else if (byte >= 0x61 && byte <= 0x66) i = byte - 0x57;\n    else if (byte >= 0x41 && byte <= 0x46) i = byte - 0x37;\n    else throw new Error(\"Expected hex char in string hex escape\");\n\n    num |= i << (--left * 4);\n    if (left) return $hex;\n    return emit(num);\n  }\n\n}\n\nfunction numberMachine(byte, emit) {\n\n  var sign = 1;\n  var number = 0;\n  var decimal = 0;\n  var esign = 1;\n  var exponent = 0;\n\n  if (byte === 0x2d) { // -\n    sign = -1;\n    return $start;\n  }\n  return $start(byte);\n\n  function $start(byte) {\n    if (byte === 0x30) {\n      return $mid;\n    }\n    if (byte > 0x30 && byte < 0x40) {\n      return $number(byte);\n    }\n    throw new Error(\"Invalid number: 0x\" + byte.toString(16));\n  }\n\n  function $mid(byte) {\n    if (byte === 0x2e) { // .\n      return $decimal;\n    }\n    return $later(byte);\n  }\n\n  function $number(byte) {\n    if (byte >= 0x30 && byte < 0x40) {\n      number = number * 10 + (byte - 0x30);\n      return $number;\n    }\n    return $mid(byte);\n  }\n\n  function $decimal(byte) {\n    if (byte >= 0x30 && byte < 0x40) {\n      decimal = (decimal + byte - 0x30) / 10;\n      return $decimal;\n    }\n    return $later(byte);\n  }\n\n  function $later(byte) {\n    if (byte === 0x45 || byte === 0x65) { // E e\n      return $esign;\n    }\n    return $done(byte);\n  }\n\n  function $esign(byte) {\n    if (byte === 0x2b) { // +\n      return $exponent;\n    }\n    if (byte === 0x2d) { // -\n      esign = -1;\n      return $exponent;\n    }\n    return $exponent(byte);\n  }\n\n  function $exponent(byte) {\n    if (byte >= 0x30 && byte < 0x40) {\n      exponent = exponent * 10 + (byte - 0x30);\n      return $exponent;\n    }\n    return $done(byte);\n  }\n\n  function $done(byte) {\n    var value = sign * (number + decimal);\n    if (exponent) {\n      value *= Math.pow(10, esign * exponent);\n    }\n    return emit(value, byte);\n  }\n\n}\n\nfunction arrayMachine(emit) {\n  var array = [];\n\n  return $array;\n\n  function $array(byte) {\n    if (byte === 0x5d) { // ]\n      return emit(array);\n    }\n    return jsonMachine(onValue, $comma)(byte);\n  }\n\n  function onValue(value) {\n    array.push(value);\n  }\n\n  function $comma(byte) {\n    if (byte === 0x09 || byte === 0x0a || byte === 0x0d || byte === 0x20) {\n      return $comma; // Ignore whitespace\n    }\n    if (byte === 0x2c) { // ,\n      return jsonMachine(onValue, $comma);\n    }\n    if (byte === 0x5d) { // ]\n      return emit(array);\n    }\n    throw new Error(\"Unexpected byte: 0x\" + byte.toString(16) + \" in array body\");\n  }\n}\n\nfunction objectMachine(emit) {\n  var object = {};\n  var key;\n\n  return $object;\n\n  function $object(byte) {\n    if (byte === 0x7d) { // }\n      return emit(object);\n    }\n    return $key(byte);\n  }\n\n  function $key(byte) {\n    if (byte === 0x09 || byte === 0x0a || byte === 0x0d || byte === 0x20) {\n      return $object; // Ignore whitespace\n    }\n    if (byte === 0x22) {\n      return stringMachine(onKey);\n    }\n    throw new Error(\"Unexpected byte: 0x\" + byte.toString(16));\n  }\n\n  function onKey(result) {\n    key = result;\n    return $colon;\n  }\n\n  function $colon(byte) {\n    if (byte === 0x09 || byte === 0x0a || byte === 0x0d || byte === 0x20) {\n      return $colon; // Ignore whitespace\n    }\n    if (byte === 0x3a) { // :\n      return jsonMachine(onValue, $comma);\n    }\n    throw new Error(\"Unexpected byte: 0x\" + byte.toString(16));\n  }\n\n  function onValue(value) {\n    object[key] = value;\n  }\n\n  function $comma(byte) {\n    if (byte === 0x09 || byte === 0x0a || byte === 0x0d || byte === 0x20) {\n      return $comma; // Ignore whitespace\n    }\n    if (byte === 0x2c) { // ,\n      return $key;\n    }\n    if (byte === 0x7d) { // }\n      return emit(object);\n    }\n    throw new Error(\"Unexpected byte: 0x\" + byte.toString(16));\n  }\n}\n\nmodule.exports = parseStream;\n\nfunction parseStream(emit) {\n  var state = jsonMachine(emit);\n  return function (chunk) {\n    if (chunk === undefined) {\n      state();\n      return emit();\n    }\n    for (var i = 0, l = chunk.length; i < l; i++) {\n      state = state(chunk[i]);\n    }\n  };\n}\n"},"3b9b1f2611e66591a0520ee46cac886290226750":{"type":"blob","body":"var fs = require('fs');\n\nmodule.exports = function (options, path) {\n\n  // Read the file and decode using extension.\n  fs.readFile(path, function (err, data) {\n    if (err) throw err;\n    var unwrap, deserialize;\n    if (path.substr(path.length - 3) === \".gz\") {\n      path = path.substr(0, path.length - 3);\n      unwrap = require('zlib').gunzip;\n    }\n    else {\n      unwrap = function (item, callback) {\n        callback(null, item);\n      }\n    }\n    if (path.substr(path.length - 5) === \".json\") {\n      deserialize = JSON.parse;\n    }\n    else if (path.substr(path.length - 8) === \".msgpack\") {\n      deserialize = require('msgpack-js').decode;\n    }\n    unwrap(data, function (err, data) {\n      if (err) throw err;\n      data = deserialize(data);\n      play(data);\n    });\n  });\n\n  function play(data) {\n    var start = Date.now();\n    var target = start;\n    var offset = 0;\n    var meta;\n\n    // Erase screen and move home\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n    run();\n\n    function queue() {\n      var delta;\n      do {\n        if (offset >= data.length) return finish(meta);\n        target += data[offset++];\n        delta = target - Date.now();\n        if (delta <= 0) {\n          run(true);\n        }\n      } while (delta <= 0);\n      setTimeout(run, delta);\n    }\n\n    function run(sync) {\n      var items = data[offset++];\n      for (var i = 0, l = items.length; i < l; i += 2) {\n        var type = items[i];\n        var item = items[i + 1];\n        if (type === 1) process.stdout.write(item);\n        else if (type === 2) process.stdout.write(item);\n        if (type === 0) meta = item;\n        else if (type === 3) meta.exit = item;\n      }\n      if (!sync) queue();\n    }\n  }\n\n  function finish(meta) {\n    if (!(options.q || options.quiet)) {\n      console.log(\"Finished\", meta)\n    }\n  }\n}\n"},"8a50918e8ac0851895e92465e0118821bba698e3":{"type":"blob","body":"#!/usr/bin/env node\nvar childProcess = require('child_process');\nvar msgpack = require('msgpack-js');\nvar inspect = require('util').inspect;\n\n// Extract options, command, and args\nvar options, command, args;\n(function () {\n  // Strip out the options and the commands to be run.\n  var first = 2;\n  for (var i = 2, l = process.argv.length; i < l; i++) {\n    if (process.argv[i][0] === '-') first = i + 1;\n    else break;\n  }\n  // Ultra simple option parser\n  options = {};\n  var pattern = /^(?:--([a-zA-Z0-9_][a-zA-Z0-9_-]+)(?:=(.*))?|-([a-zA-Z_]))$/\n  process.argv.slice(2, first).forEach(function (option) {\n    var match = option.match(/^--([a-z][a-z-0-9_-]+)(?:=(.*))?$/i) ||\n                option.match(/^-([a-z])$/i);\n    options[match[1]] = match[2] || true;\n  });\n  args = process.argv.slice(first);\n  command = args.shift();\n}());\n\nif (!command || options.h || options.help) {\n  console.error(\"Record a command's output to a file.\");\n  console.error(\"Usage:\\n\\trec [options] command [args...]\\n\");\n  process.exit(-1);\n}\n\n// Erase screen and move home\nprocess.stdout.write(\"\\u001b[2J\\u001b[H\");\n\nvar child = childProcess.spawn(command, args, {\n  stdio: [0, 'pipe', 'pipe']\n});\nchild.stdout.on(\"data\", function (chunk) {\n  record(1, chunk);\n  // process.stdout.write(chunk);\n});\nchild.stderr.on(\"data\", function (chunk) {\n  record(2, chunk);\n  process.stderr.write(chunk);\n});\n\n// Forward basic signals to child.\nprocess.on('SIGINT', function () { child.kill('SIGINT'); });\nprocess.on('SIGTERM', function () { child.kill('SIGTERM'); });\n\nchild.on('exit', function (code, signal) {\n  record(3, { code: code, signal: signal });\n});\n\nchild.on('close', function () {\n  console.log();\n  console.log(inspect(events, {colors:true}));\n});\n\nvar last = Date.now();\nvar current = [];\nvar events = [current];\nrecord(0, {\n  start: last,\n  command: command,\n  args: args,\n  platform: process.platform,\n  arch: process.arch\n});\n\nfunction record(event, value) {\n  console.log(\"RECORD\", event, value);\n  var time = Date.now();\n  if (time !== last) {\n    var delta = time - last;\n    last = time;\n    current = [];\n    events.push(delta, current);\n  }\n  current.push(event, value);\n}\n"},"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391":{"type":"blob","body":""},"b3c2be325e4c062fc180a7e8c5c7f806167d7b84":{"type":"tree","body":[{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"6ab9d6f84b659913507128245474af75591945fe"},{"mode":33188,"name":"package.json","hash":"2c391ad1d3a9f5770960ae393781dfcb72375e62"},{"mode":33188,"name":"rec.js","hash":"551cd893393fd8911eae524bed8bcc4422bd1da8"}]},"621e676fdc1c90caf8cf347bc928911f15b3975f":{"type":"tree","body":[{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"6ab9d6f84b659913507128245474af75591945fe"}]},"b815223e0d180cb9cec268a7c994822873395077":{"type":"tree","body":[{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"6ab9d6f84b659913507128245474af75591945fe"},{"mode":33188,"name":"package.json","hash":"8e3be7c4109e1a316f2eadacc80eca3299ef119e"},{"mode":33261,"name":"rec.js","hash":"8a50918e8ac0851895e92465e0118821bba698e3"}]},"6be01ecca6c82d1afc4c2d3e36b6ec54dedb5f04":{"type":"blob","body":"#!/usr/bin/env node\nvar childProcess = require('child_process');\nvar msgpack = require('msgpack-js');\nvar inspect = require('util').inspect;\n\n// Extract options, command, and args\nvar options, command, args;\n(function () {\n  // Strip out the options and the commands to be run.\n  var first = 2;\n  for (var i = 2, l = process.argv.length; i < l; i++) {\n    if (process.argv[i][0] === '-') first = i + 1;\n    else break;\n  }\n  // Ultra simple option parser\n  options = {};\n  var pattern = /^(?:--([a-zA-Z0-9_][a-zA-Z0-9_-]+)(?:=(.*))?|-([a-zA-Z_]))$/\n  process.argv.slice(2, first).forEach(function (option) {\n    var match = option.match(/^--([a-z][a-z-0-9_-]+)(?:=(.*))?$/i) ||\n                option.match(/^-([a-z])$/i);\n    options[match[1]] = match[2] || true;\n  });\n  args = process.argv.slice(first);\n  command = args.shift();\n}());\n\nif (!command || options.h || options.help) {\n  console.error(\"Record a command's output to a file.\");\n  console.error(\"Usage:\\n\\trec [options] command [args...]\\n\");\n  process.exit(-1);\n}\n\n// Erase screen and move home\nprocess.stdout.write(\"\\u001b[2J\\u001b[H\");\n\nvar child = childProcess.spawn(command, args, {\n  stdio: [0, 'pipe', 'pipe']\n});\nchild.stdout.on(\"data\", function (chunk) {\n  record(1, chunk);\n  process.stdout.write(chunk);\n});\nchild.stderr.on(\"data\", function (chunk) {\n  record(2, chunk);\n  process.stderr.write(chunk);\n});\n\n// Forward basic signals to child.\nprocess.on('SIGINT', function () { child.kill('SIGINT'); });\nprocess.on('SIGTERM', function () { child.kill('SIGTERM'); });\n\nchild.on('exit', function (code, signal) {\n  record(3, { code: code, signal: signal });\n});\n\nchild.on('close', function () {\n  console.log();\n  console.log(inspect(events, {colors:true}));\n});\n\nvar last = Date.now();\nvar current = [];\nvar events = [current];\nrecord(0, {\n  start: last,\n  command: command,\n  args: args,\n  platform: process.platform,\n  arch: process.arch\n});\n\nfunction record(event, value) {\n  var time = Date.now();\n  if (time !== last) {\n    var delta = time - last;\n    last = time;\n    current = [];\n    events.push(delta, current);\n  }\n  current.push(event, value);\n}\n"},"d3cbfaaf3a325c12852ccc7774228a6d4bd15cb2":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"cde58cc9c1ef872a038e04d7f768b45d09cd284d"},{"mode":33188,"name":"package.json","hash":"019e41a779a047558a8973170dc13c193d671959"},{"mode":33188,"name":"play.js","hash":"3b9b1f2611e66591a0520ee46cac886290226750"},{"mode":33261,"name":"rec.js","hash":"e067633c0a74d12e0de012abc2935a63293856f0"},{"mode":33188,"name":"record.js","hash":"dde726f0b8a18902b8611d8adcbe5a5379bcbc11"}]},"c185b1f4f039cf6935e89fb974d7aac7bb906c52":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"e00e4a02975905d6d732f2d9ab7832fb2ecc6282"},{"mode":33188,"name":"package.json","hash":"019e41a779a047558a8973170dc13c193d671959"},{"mode":33188,"name":"play.js","hash":"3b9b1f2611e66591a0520ee46cac886290226750"},{"mode":33261,"name":"rec.js","hash":"e067633c0a74d12e0de012abc2935a63293856f0"},{"mode":33188,"name":"record.js","hash":"dde726f0b8a18902b8611d8adcbe5a5379bcbc11"}]},"e3ae6e9500ca6994485979e5065aa0c752a24ae4":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"e00e4a02975905d6d732f2d9ab7832fb2ecc6282"},{"mode":33188,"name":"jsonMachine.js","hash":"25ac88270593332e051cad7047a73f41f6a31035"},{"mode":33188,"name":"msgpackMachine.js","hash":"40e2d5f4819e2e3c3303ea9f768855835ccf5e70"},{"mode":33188,"name":"package.json","hash":"b4e4ce0da7bd799a5be5977d90244f73fee040e5"},{"mode":33188,"name":"play.js","hash":"007a1b768dad6a3532a792618326f057eaecb85e"},{"mode":33261,"name":"rec.js","hash":"01895a99812d8d1c45e0cc18bc58085f0595fe80"},{"mode":33188,"name":"record.js","hash":"b81cd43e2e300e794f4cc2c6496fa815de4194f1"}]},"7b107ed543d75b421678b11c1be849663ad91997":{"type":"blob","body":"var childProcess = require('child_process');\nvar fs = require('fs');\n\nfunction uleb128(num) {\n\n  var bytes = [];\n  while (num > 0x7f) {\n    bytes.push((num & 0x7f) | 0x80);\n    num >>= 7;\n  }\n  bytes.push(num);\n  return new Buffer(bytes);\n}\n\nmodule.exports = function (options, command, args) {\n\n  var path = options.name || \"rec\";\n  if (options.msgpack || options.m) path += \".msgpack\";\n  else path += \".json\";\n  if (options.gzip || options.g) path += \".gz\";\n\n  var file;\n  if (options.s || options.stream) {\n    file = process.stdout;\n  }\n  else {\n    file = fs.createWriteStream(path);\n  }\n  var output = file;\n\n  var write;\n  if (options.msgpack || options.m) {\n    // uleb128 length header framed msgpack\n    var msgpack = require('msgpack-js');\n    write = function (item) {\n      var serialized = msgpack.encode(item);\n\n      output.write(uleb128(serialized.length));\n      return output.write(serialized);\n    };\n  }\n  else {\n    // Newline framed JSON\n    write = function (item) {\n      return output.write(JSON.stringify(item) + \"\\n\");\n    };\n  }\n  if (options.gzip || options.g) {\n    var output = require('zlib').createGzip();\n    output.pipe(file);\n  }\n  // Erase screen and move home\n  if (options.c || options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n\n  var child = childProcess.spawn(command, args, {\n    stdio: [0, 'pipe', 'pipe']\n  });\n  if (!(options.msgpack || options.m)) {\n    child.stdout.setEncoding('utf8');\n    child.stderr.setEncoding('utf8');\n  }\n  child.stdout.on(\"data\", function (chunk) {\n    record(1, chunk);\n    if (!(options.s || options.stream)) {\n      process.stdout.write(chunk);\n    }\n  });\n  child.stderr.on(\"data\", function (chunk) {\n    record(2, chunk);\n    process.stderr.write(chunk);\n  });\n\n  // Forward basic signals to child.\n  process.on('SIGINT', function () { child.kill('SIGINT'); });\n  process.on('SIGTERM', function () { child.kill('SIGTERM'); });\n\n  var left = 2;\n  child.on('exit', function (code, signal) {\n    record(3, { code: code, signal: signal });\n\n  });\n\n  child.on('close', function () {\n    write(current);\n    if (!options.s || options.stream) {\n      output.end();\n      if (!(options.q || options.quiet)) {\n        console.error();\n        console.error(\"Recording written to \" + path);\n      }\n    }\n  });\n\n  var last = Date.now();\n  var current = [];\n  record(0, {\n    start: last,\n    command: command,\n    args: args,\n    platform: process.platform,\n    arch: process.arch\n  });\n\n  function record(event, value) {\n    var time = Date.now();\n    if (time !== last) {\n      write(current);\n      var delta = time - last;\n      write(delta);\n      last = time;\n      current = [];\n    }\n    current.push(event, value);\n  }\n\n};\n"},"fb8449fa644af5778a18c83466c2ba8f33ba5c1a":{"type":"blob","body":"var childProcess = require('child_process');\nvar fs = require('fs');\n\nfunction uleb128(num) {\n\n  var bytes = [];\n  while (num > 0x7f) {\n    bytes.push((num & 0x7f) | 0x80);\n    num >>= 7;\n  }\n  bytes.push(num);\n  return new Buffer(bytes);\n}\n\nmodule.exports = function (options, command, args) {\n  if (options.msgpack) options.format = \"msgpack\";\n  else options.format = \"json\";\n\n  var path = options.name || \"rec\";\n  if (options.format === \"json\") path += \".json\";\n  else path += \".msgpack\";\n  if (options.gzip) path += \".gz\";\n\n  var file;\n  if (options.stream) {\n    file = process.stdout;\n  }\n  else {\n    file = fs.createWriteStream(path);\n  }\n  var output = file;\n\n  var write;\n  if (options.format === \"msgpack\") {\n    // uleb128 length header framed msgpack\n    var msgpack = require('msgpack-js');\n    write = function (item) {\n      var serialized = msgpack.encode(item);\n\n      output.write(uleb128(serialized.length));\n      return output.write(serialized);\n    };\n  }\n  else {\n    // Newline framed JSON\n    write = function (item) {\n      return output.write(JSON.stringify(item) + \"\\n\");\n    };\n  }\n  if (options.gzip) {\n    var output = require('zlib').createGzip();\n    output.pipe(file);\n  }\n  // Erase screen and move home\n  if (options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n\n  var child = childProcess.spawn(command, args, {\n    stdio: [0, 'pipe', 'pipe']\n  });\n  if (options.format === \"json\") {\n    child.stdout.setEncoding('utf8');\n    child.stderr.setEncoding('utf8');\n  }\n  child.stdout.on(\"data\", function (chunk) {\n    record(1, chunk);\n    if (!options.stream) {\n      process.stdout.write(chunk);\n    }\n  });\n  child.stderr.on(\"data\", function (chunk) {\n    record(2, chunk);\n    process.stderr.write(chunk);\n  });\n\n  // Forward basic signals to child.\n  process.on('SIGINT', function () { child.kill('SIGINT'); });\n  process.on('SIGTERM', function () { child.kill('SIGTERM'); });\n\n  var left = 2;\n  child.on('exit', function (code, signal) {\n    record(3, { code: code, signal: signal });\n\n  });\n\n  child.on('close', function () {\n    write(current);\n    if (!options.stream) {\n      output.end();\n      if (!(options.quiet)) {\n        console.error();\n        console.error(\"Recording written to \" + path);\n      }\n    }\n  });\n\n  var last = Date.now();\n  var current = [];\n  record(0, {\n    start: last,\n    command: command,\n    args: args,\n    platform: process.platform,\n    arch: process.arch\n  });\n\n  function record(event, value) {\n    var time = Date.now();\n    if (time !== last) {\n      write(current);\n      var delta = time - last;\n      write(delta);\n      last = time;\n      current = [];\n    }\n    current.push(event, value);\n  }\n\n};\n"},"dfc3db8333d894641b224299c7e8ee4576856dc4":{"type":"blob","body":"var childProcess = require('child_process');\nvar fs = require('fs');\n\nfunction uleb128(num) {\n\n  var bytes = [];\n  while (num > 0x7f) {\n    bytes.push((num & 0x7f) | 0x80);\n    num >>= 7;\n  }\n  bytes.push(num);\n  return new Buffer(bytes);\n}\n\nmodule.exports = function (options, command, args) {\n  if (options.msgpack) options.format = \"msgpack\";\n  else options.format = \"json\";\n\n  var path = options.name || command + \"-\" + Date.now().toString(36);\n  if (options.format === \"json\") path += \".json\";\n  else path += \".msgpack\";\n  if (options.gzip) path += \".gz\";\n\n  var file;\n  if (options.stream) {\n    file = process.stdout;\n  }\n  else {\n    file = fs.createWriteStream(path);\n  }\n  var output = file;\n\n  var encoder;\n  if (options.format === \"msgpack\") {\n    encoder = require('./msgpack.js').encoder;\n  }\n  else {\n    encoder = require('./json.js').encoder;\n  }\n  if (options.gzip) {\n    var output = require('zlib').createGzip();\n    output.pipe(file);\n  }\n  // Erase screen and move home\n  if (options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n\n  var write = encoder(function (chunk) {\n    output.write(chunk);\n  });\n\n  var child = childProcess.spawn(command, args, {\n    stdio: [0, 'pipe', 'pipe']\n  });\n  if (options.format === \"json\") {\n    child.stdout.setEncoding('utf8');\n    child.stderr.setEncoding('utf8');\n  }\n  child.stdout.on(\"data\", function (chunk) {\n    record(1, chunk);\n    if (!options.stream) {\n      process.stdout.write(chunk);\n    }\n  });\n  child.stderr.on(\"data\", function (chunk) {\n    record(2, chunk);\n    process.stderr.write(chunk);\n  });\n\n  // Forward basic signals to child.\n  process.on('SIGINT', function () { child.kill('SIGINT'); });\n  process.on('SIGTERM', function () { child.kill('SIGTERM'); });\n\n  var left = 2;\n  child.on('exit', function (code, signal) {\n    record(3, { code: code, signal: signal });\n\n  });\n\n  child.on('close', function () {\n    write(current);\n    if (!options.stream) {\n      output.end();\n      if (!(options.quiet)) {\n        console.error();\n        console.error(\"Recording written to \" + path);\n      }\n    }\n  });\n\n  var last = Date.now();\n  var current = [];\n  record(0, {\n    start: last,\n    command: command,\n    args: args,\n    platform: process.platform,\n    arch: process.arch\n  });\n\n\n  function record(event, value) {\n    var time = Date.now();\n    if (time !== last) {\n      write(current);\n      var delta = time - last;\n      write(delta);\n      last = time;\n      current = [];\n    }\n    current.push(event, value);\n  }\n\n};\n"},"ea626ff8298a0ccdcd9da14d87c2b2e0b6c21b19":{"type":"blob","body":"#!/usr/bin/env node\n\n// Extract options, command, and args\nvar options, command, args;\n(function () {\n  // Strip out the options and the commands to be run.\n  var first = 2;\n  for (var i = 2, l = process.argv.length; i < l; i++) {\n    if (process.argv[i][0] === '-') first = i + 1;\n    else break;\n  }\n  // Ultra simple option parser\n  options = {};\n  process.argv.slice(2, first).forEach(function (option) {\n    var match;\n    if (match = option.match(/^--([a-z0-9][a-z0-9_-]+)(?:=(.*))?$/i)) {\n      options[match[1]] = match[2] || true;\n    }\n    else if (match = option.match(/^-([a-z0-9]+)$/i)) {\n      var letters = match[1];\n      for (var i = 0, l = letters.length; i < l; i++) {\n        options[letters[i]] = true;\n      }\n    }\n    else {\n      throw new SyntaxError(\"Malformed option: \" + JSON.stringify(option));\n    }\n  });\n  args = process.argv.slice(first);\n  command = args.shift();\n}());\n\nif (!command || options.h || options.help) {\n  console.error(\"\\n  Usage:  rec [options] command [args...]\\n\");\n  console.error(\"  Options:\\n\");\n  console.error(\"    -j --json        Output JSON format (default)\");\n  console.error(\"    -m --msgpack     Output MsgPack format\");\n  console.error(\"    -g --gzip        Gzip output\");\n  console.error(\"    -p --play        Play back a recording\");\n  console.error(\"    -q --quiet       Suppress message at end\");\n  console.error(\"    -c --clear       Clear screen before starting\");\n  console.error(\"    -s --stream      Stream data to stdout\");\n  console.error(\"    --name=filename  File to save to (default is 'out')\");\n  console.error();\n  process.exit(-1);\n}\n\nif (options.p || options.play) {\n  require('./play.js')(options, command, args);\n}\nelse {\n  require('./record.js')(options, command, args);\n}\n\n"},"cf68e2731eb6632336717e8b5a4aa240f301f3ac":{"type":"blob","body":"var fs = require('fs');\n\nmodule.exports = function (options, path) {\n\n  var file;\n  if (!path) {\n    options.stream = true;\n    file = process.stdin;\n  }\n  else {\n    file = fs.createReadStream(path);\n    if (path.substr(path.length - 3) === \".gz\") {\n      path = path.substr(0, path.length - 3);\n      options.gzip = true;\n    }\n    if (path.substr(path.length - 5) === \".json\" && options.json === undefined) {\n      options.json = true;\n    }\n    if (path.substr(path.length - 8) === \".msgpack\" && options.msgpack === undefined) {\n      options.msgpack = true;\n    }\n  }\n  if (options.msgpack) options.format = \"msgpack\";\n  if (options.json) options.format = \"json\";\n  if (!options.format) throw new Error(\"Please specify an input encoding\");\n\n  var input = file;\n  if (options.gzip) {\n    var input = require('zlib').createGunzip();\n    file.pipe(input);\n  }\n\n  var parser;\n  if (options.format === \"json\") {\n    parser = require('./jsonMachine.js');\n  }\n  else {\n    parser = require('./msgpackMachine.js');\n  }\n\n  if (options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n  var target = Date.now();\n  var queue = [];\n  var delay = 0;\n  var done = false;\n  var waiting = null;\n  var meta;\n  input.on(\"data\", parser(function (item) {\n    if (delay === null) {\n      delay = item;\n      return;\n    }\n    queue.push([delay, item]);\n    delay = null;\n    check();\n  }));\n  input.on(\"end\", function () {\n    done = true;\n    check();\n  });\n\n  function check() {\n    var delta, next;\n    while (!waiting && (next = queue.shift())) {\n      target += next[0];\n      delta = target - Date.now();\n      if (delta <= 0) {\n        run(next[1]);\n      }\n      else {\n        waiting = next[1];\n        setTimeout(resume, delta);\n      }\n    }\n    if (done && !waiting && !next) {\n      finish();\n    }\n  }\n\n  function resume() {\n    var item = waiting;\n    waiting = null;\n    run(item);\n    check();\n  }\n\n  function run(items) {\n    for (var i = 0, l = items.length; i < l; i += 2) {\n      var type = items[i];\n      var item = items[i + 1];\n      if (type === 1) process.stdout.write(item);\n      else if (type === 2) process.stderr.write(item);\n      else if (type === 0) meta = item;\n      else if (type === 3) meta.exit = item;\n    }\n  }\n\n  function finish() {\n    if (!options.quiet) {\n      console.error(\"\\nFinished\", meta)\n    }\n  }\n}\n"},"bcca2216e84063b20229a12a94bc1f11bb923c02":{"type":"blob","body":"{\n  \"name\": \"rec\",\n  \"version\": \"0.0.0\",\n  \"description\": \"A tool for recording CLI programs and posting their output.\",\n  \"main\": \"rec.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/rec.git\"\n  },\n  \"keywords\": [\n    \"record\",\n    \"terminal\",\n    \"post\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/rec/issues\"\n  }\n}\n"},"019e41a779a047558a8973170dc13c193d671959":{"type":"blob","body":"{\n  \"name\": \"rec\",\n  \"version\": \"0.1.0\",\n  \"description\": \"A tool for recording CLI programs and posting their output.\",\n  \"bin\": {\n    \"rec\": \"./rec.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/rec.git\"\n  },\n  \"keywords\": [\n    \"record\",\n    \"terminal\",\n    \"post\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/rec/issues\"\n  },\n  \"dependencies\": {\n    \"msgpack-js\": \"~0.3.0\"\n  }\n}\n"},"40e2d5f4819e2e3c3303ea9f768855835ccf5e70":{"type":"blob","body":"var msgpack = require('msgpack-js');\n\nmodule.exports = parser;\n\nfunction parser(emit) {\n  var left = 0;\n  var offset = 0;\n  var parts = null;\n  return function (chunk) {\n    for (var i = 0, l = chunk.length; i < l; i++) {\n      if (parts === null) {\n        var byte = chunk[i];\n        left |= (byte & 0x7f) << offset;\n        offset += 7;\n        if (!(byte & 0x80)) parts = [];\n      }\n      else {\n        var len = Math.min(l - i, left);\n        parts.push(chunk.slice(i, i + len));\n        left -= len;\n        i += len - 1;\n        if (!left) {\n          var item = msgpack.decode(Buffer.concat(parts));\n          parts = null;\n          offset = 0;\n          emit(item);\n        }\n      }\n    }\n  };\n}\n"},"6ab9d6f84b659913507128245474af75591945fe":{"type":"blob","body":"rec\n===\n\nA tool for recording CLI programs and posting their output.\n"},"cde58cc9c1ef872a038e04d7f768b45d09cd284d":{"type":"blob","body":"rec\n===\n\nA tool for recording CLI programs and posting their output.\n\nTo install, first install [node.js][] and then `npm install -g rec`.\n\n## Instructions\n\n```\n> rec\n\n  Usage:  rec [options] command [args...]\n\n  Options:\n\n    -m --msgpack     Output MsgPack format (default)\n    -j --json        Output JSON format\n    -g --gzip        Gzip output\n    -p --play        Play back a recording\n    -q --quiet       Suppress message at end\n    --name=filename  File to save to (default is 'out')\n\n```\n\n## Record a Terminalcast\n\n```\n> rec my program\n```\n\n## Play Back a Terminalcast\n\n```\nrec --play rec.msgpack\n```\n\n[node.js]: http://nodejs.org/\n"},"415fcf359a4496aa3a7b2b9fa63743e58f9efd68":{"type":"blob","body":"rec\n===\n\nA tool for recording CLI programs and posting their output.\n\nTo install, first install [node.js][] and then `npm install -g rec`.\n\n## Instructions\n\n```\n> rec\n\n  Usage:  rec [options] command [args...]\n\n  Options:\n\n    -m --msgpack     Output MsgPack format (default)\n    -j --json        Output JSON format\n    -g --gzip        Gzip output\n    -p --play        Play back a recording\n    -q --quiet       Suppress message at end\n    --name=filename  File to save to (default is 'out')\n\n```\n\n## Record a Terminalcast\n\n```\n> rec my program\n```\n\n## Play Back a Terminalcast\n\n```\nrec --play\n```\n\n[node.js]: http://nodejs.org/\n"},"303728246fc1680647fc43c3c5fe6ae2fcbebd10":{"type":"blob","body":"The MIT License (MIT)\n\nCopyright (c) 2013 Tim Caswell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"},"0e21155c9f623316dda67fea79945de9b3c6095c":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"e00e4a02975905d6d732f2d9ab7832fb2ecc6282"},{"mode":33188,"name":"jsonMachine.js","hash":"25ac88270593332e051cad7047a73f41f6a31035"},{"mode":33188,"name":"msgpackMachine.js","hash":"40e2d5f4819e2e3c3303ea9f768855835ccf5e70"},{"mode":33188,"name":"package.json","hash":"62151beba7eeadee4dd3794c25ddaa773c58a208"},{"mode":33188,"name":"play.js","hash":"5c0451587149dfaf37a71425a34515d5583598ea"},{"mode":33261,"name":"rec.js","hash":"ea626ff8298a0ccdcd9da14d87c2b2e0b6c21b19"},{"mode":33188,"name":"record.js","hash":"f22cc8f67ae65447bd31c53afa8b0350ccaf9d98"}]},"8c7343c259415a2ac73a12e7018023afdd3f0041":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"e00e4a02975905d6d732f2d9ab7832fb2ecc6282"},{"mode":33188,"name":"jsonMachine.js","hash":"25ac88270593332e051cad7047a73f41f6a31035"},{"mode":33188,"name":"msgpackMachine.js","hash":"40e2d5f4819e2e3c3303ea9f768855835ccf5e70"},{"mode":33188,"name":"package.json","hash":"62151beba7eeadee4dd3794c25ddaa773c58a208"},{"mode":33188,"name":"play.js","hash":"cf68e2731eb6632336717e8b5a4aa240f301f3ac"},{"mode":33261,"name":"rec.js","hash":"724f231ad46532d3c41f9f2958bfc54ac5858fd9"},{"mode":33188,"name":"record.js","hash":"fb8449fa644af5778a18c83466c2ba8f33ba5c1a"}]},"f5ea3e944f01733f968dc4fa28eecdfe158ffa45":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"e00e4a02975905d6d732f2d9ab7832fb2ecc6282"},{"mode":33188,"name":"jsonMachine.js","hash":"25ac88270593332e051cad7047a73f41f6a31035"},{"mode":33188,"name":"msgpackMachine.js","hash":"40e2d5f4819e2e3c3303ea9f768855835ccf5e70"},{"mode":33188,"name":"package.json","hash":"465f1fcf600f52f93acbe9589a6ecdd8904ec1e7"},{"mode":33188,"name":"play.js","hash":"cf68e2731eb6632336717e8b5a4aa240f301f3ac"},{"mode":33261,"name":"rec.js","hash":"724f231ad46532d3c41f9f2958bfc54ac5858fd9"},{"mode":33188,"name":"record.js","hash":"fb8449fa644af5778a18c83466c2ba8f33ba5c1a"}]},"bdf1be2067cd3ed85baef5eec5ec0542b5d4290d":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"e00e4a02975905d6d732f2d9ab7832fb2ecc6282"},{"mode":33188,"name":"json.js","hash":"50dd3498568164b7f088e1e91a80c09bfd361bdb"},{"mode":33188,"name":"msgpack.js","hash":"0447d132b227ea953a75504d17e803c024d256e3"},{"mode":33188,"name":"package.json","hash":"465f1fcf600f52f93acbe9589a6ecdd8904ec1e7"},{"mode":33188,"name":"play.js","hash":"947312a68ab316cf7084be2a9a499aed2e4b07f4"},{"mode":33261,"name":"rec.js","hash":"724f231ad46532d3c41f9f2958bfc54ac5858fd9"},{"mode":33188,"name":"record.js","hash":"dfc3db8333d894641b224299c7e8ee4576856dc4"}]},"c626fdf7081bc4f27896b4ea4ccb1199d4fc5aa8":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"e00e4a02975905d6d732f2d9ab7832fb2ecc6282"},{"mode":33188,"name":"jsonMachine.js","hash":"25ac88270593332e051cad7047a73f41f6a31035"},{"mode":33188,"name":"msgpackMachine.js","hash":"40e2d5f4819e2e3c3303ea9f768855835ccf5e70"},{"mode":33188,"name":"package.json","hash":"fe0668ff14a3a67f006a2c9ec8a697661e770982"},{"mode":33188,"name":"play.js","hash":"fef25317fc208af9fb815adcf700a1f0dd1f0207"},{"mode":33261,"name":"rec.js","hash":"ea626ff8298a0ccdcd9da14d87c2b2e0b6c21b19"},{"mode":33188,"name":"record.js","hash":"f22cc8f67ae65447bd31c53afa8b0350ccaf9d98"}]},"c3e2a79f35c6b3321f1d00726be0cd13569ee386":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"e00e4a02975905d6d732f2d9ab7832fb2ecc6282"},{"mode":33188,"name":"jsonMachine.js","hash":"25ac88270593332e051cad7047a73f41f6a31035"},{"mode":33188,"name":"msgpackMachine.js","hash":"40e2d5f4819e2e3c3303ea9f768855835ccf5e70"},{"mode":33188,"name":"package.json","hash":"62151beba7eeadee4dd3794c25ddaa773c58a208"},{"mode":33188,"name":"play.js","hash":"5c0451587149dfaf37a71425a34515d5583598ea"},{"mode":33261,"name":"rec.js","hash":"ea626ff8298a0ccdcd9da14d87c2b2e0b6c21b19"},{"mode":33188,"name":"record.js","hash":"7b107ed543d75b421678b11c1be849663ad91997"}]},"8e3be7c4109e1a316f2eadacc80eca3299ef119e":{"type":"blob","body":"{\n  \"name\": \"rec\",\n  \"version\": \"0.0.0\",\n  \"description\": \"A tool for recording CLI programs and posting their output.\",\n  \"bin\": {\n    \"rec\": \"./rec.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/rec.git\"\n  },\n  \"keywords\": [\n    \"record\",\n    \"terminal\",\n    \"post\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/rec/issues\"\n  },\n  \"dependencies\": {\n    \"msgpack-js\": \"~0.3.0\"\n  }\n}\n"},"b4e4ce0da7bd799a5be5977d90244f73fee040e5":{"type":"blob","body":"{\n  \"name\": \"rec\",\n  \"version\": \"0.2.0\",\n  \"description\": \"A tool for recording CLI programs and posting their output.\",\n  \"bin\": {\n    \"rec\": \"./rec.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/rec.git\"\n  },\n  \"keywords\": [\n    \"record\",\n    \"terminal\",\n    \"post\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/rec/issues\"\n  },\n  \"dependencies\": {\n    \"msgpack-js\": \"~0.3.0\"\n  }\n}\n"},"fe0668ff14a3a67f006a2c9ec8a697661e770982":{"type":"blob","body":"{\n  \"name\": \"rec\",\n  \"version\": \"0.2.1\",\n  \"description\": \"A tool for recording CLI programs and posting their output.\",\n  \"bin\": {\n    \"rec\": \"./rec.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/rec.git\"\n  },\n  \"keywords\": [\n    \"record\",\n    \"terminal\",\n    \"post\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/rec/issues\"\n  },\n  \"dependencies\": {\n    \"msgpack-js\": \"~0.3.0\"\n  }\n}\n"},"62151beba7eeadee4dd3794c25ddaa773c58a208":{"type":"blob","body":"{\n  \"name\": \"rec\",\n  \"version\": \"0.2.2\",\n  \"description\": \"A tool for recording CLI programs and posting their output.\",\n  \"bin\": {\n    \"rec\": \"./rec.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/rec.git\"\n  },\n  \"keywords\": [\n    \"record\",\n    \"terminal\",\n    \"post\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/rec/issues\"\n  },\n  \"dependencies\": {\n    \"msgpack-js\": \"~0.3.0\"\n  }\n}\n"},"465f1fcf600f52f93acbe9589a6ecdd8904ec1e7":{"type":"blob","body":"{\n  \"name\": \"rec\",\n  \"version\": \"0.2.3\",\n  \"description\": \"A tool for recording CLI programs and posting their output.\",\n  \"bin\": {\n    \"rec\": \"./rec.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/creationix/rec.git\"\n  },\n  \"keywords\": [\n    \"record\",\n    \"terminal\",\n    \"post\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/creationix/rec/issues\"\n  },\n  \"dependencies\": {\n    \"msgpack-js\": \"~0.3.0\"\n  }\n}\n"},"5c0451587149dfaf37a71425a34515d5583598ea":{"type":"blob","body":"var fs = require('fs');\n\nmodule.exports = function (options, path) {\n\n  var file = fs.createReadStream(path);\n  var input = file;\n  if (path.substr(path.length - 3) === \".gz\") {\n    path = path.substr(0, path.length - 3);\n    var input = require('zlib').createGunzip();\n    file.pipe(input);\n  }\n\n  var parser;\n  if (path.substr(path.length - 5) === \".json\") {\n    parser = require('./jsonMachine.js');\n  }\n  else if (path.substr(path.length - 8) === \".msgpack\") {\n    parser = require('./msgpackMachine.js');\n  }\n\n  if (options.c || options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n  var target = Date.now();\n  var queue = [];\n  var delay = 0;\n  var done = false;\n  var waiting = null;\n  var meta;\n  input.on(\"data\", parser(function (item) {\n    if (delay === null) {\n      delay = item;\n      return;\n    }\n    queue.push([delay, item]);\n    delay = null;\n    check();\n  }));\n  input.on(\"end\", function () {\n    done = true;\n    check();\n  });\n\n  function check() {\n    var delta, next;\n    while (!waiting && (next = queue.shift())) {\n      target += next[0];\n      delta = target - Date.now();\n      if (delta <= 0) {\n        run(next[1]);\n      }\n      else {\n        waiting = next[1];\n        setTimeout(resume, delta);\n      }\n    }\n    if (done && !waiting && !next) {\n      finish();\n    }\n  }\n\n  function resume() {\n    var item = waiting;\n    waiting = null;\n    run(item);\n    check();\n  }\n\n  function run(items) {\n    for (var i = 0, l = items.length; i < l; i += 2) {\n      var type = items[i];\n      var item = items[i + 1];\n      if (type === 1) process.stdout.write(item);\n      else if (type === 2) process.stderr.write(item);\n      else if (type === 0) meta = item;\n      else if (type === 3) meta.exit = item;\n    }\n  }\n\n  function finish() {\n    if (!(options.q || options.quiet)) {\n      console.error(\"\\nFinished\", meta)\n    }\n  }\n}\n"},"e5afa8b0271c88215653e0a46d354cfc758d356c":{"type":"blob","body":"var childProcess = require('child_process');\nvar msgpack = require('msgpack-js');\n\n// Extract options, command, and args\nvar options, command, args;\n(function () {\n  // Strip out the options and the commands to be run.\n  var first = 2;\n  for (var i = 2, l = process.argv.length; i < l; i++) {\n    if (process.argv[i][0] === '-') first = i + 1;\n  }\n  // Ultra simple option parser\n  options = {};\n  var pattern = /^(?:--([a-zA-Z0-9_][a-zA-Z0-9_-]+)(?:=(.*))?|-([a-zA-Z_]))$/\n  process.argv.slice(2, first).forEach(function (option) {\n    var match = option.match(/^--([a-z][a-z-0-9_-]+)(?:=(.*))?$/i) ||\n                option.match(/^-([a-z])$/i);\n    options[match[1]] = match[2] || true;\n  });\n  args = process.argv.slice(first);\n  command = args.shift();\n}());\n\n\nconsole.log(options, command, args);\n"},"e067633c0a74d12e0de012abc2935a63293856f0":{"type":"blob","body":"#!/usr/bin/env node\n\n// Extract options, command, and args\nvar options, command, args;\n(function () {\n  // Strip out the options and the commands to be run.\n  var first = 2;\n  for (var i = 2, l = process.argv.length; i < l; i++) {\n    if (process.argv[i][0] === '-') first = i + 1;\n    else break;\n  }\n  // Ultra simple option parser\n  options = {};\n  process.argv.slice(2, first).forEach(function (option) {\n    var match;\n    if (match = option.match(/^--([a-z0-9][a-z0-9_-]+)(?:=(.*))?$/i)) {\n      options[match[1]] = match[2] || true;\n    }\n    else if (match = option.match(/^-([a-z0-9]+)$/i)) {\n      var letters = match[1];\n      for (var i = 0, l = letters.length; i < l; i++) {\n        options[letters[i]] = true;\n      }\n    }\n    else {\n      throw new SyntaxError(\"Malformed option: \" + JSON.stringify(option));\n    }\n  });\n  args = process.argv.slice(first);\n  command = args.shift();\n}());\n\nif (!command || options.h || options.help) {\n  console.error(\"\\n  Usage:  rec [options] command [args...]\\n\");\n  console.error(\"  Options:\\n\");\n  console.error(\"    -m --msgpack     Output MsgPack format (default)\");\n  console.error(\"    -j --json        Output JSON format\");\n  console.error(\"    -g --gzip        Gzip output\");\n  console.error(\"    -p --play        Play back a recording\");\n  console.error(\"    -q --quiet       Suppress message at end\");\n  console.error(\"    --name=filename  File to save to (default is 'out')\");\n  console.error();\n  process.exit(-1);\n}\n\nif (options.p || options.play) {\n  require('./play.js')(options, command, args);\n}\nelse {\n  require('./record.js')(options, command, args);\n}\n\n"},"01895a99812d8d1c45e0cc18bc58085f0595fe80":{"type":"blob","body":"#!/usr/bin/env node\n\n// Extract options, command, and args\nvar options, command, args;\n(function () {\n  // Strip out the options and the commands to be run.\n  var first = 2;\n  for (var i = 2, l = process.argv.length; i < l; i++) {\n    if (process.argv[i][0] === '-') first = i + 1;\n    else break;\n  }\n  // Ultra simple option parser\n  options = {};\n  process.argv.slice(2, first).forEach(function (option) {\n    var match;\n    if (match = option.match(/^--([a-z0-9][a-z0-9_-]+)(?:=(.*))?$/i)) {\n      options[match[1]] = match[2] || true;\n    }\n    else if (match = option.match(/^-([a-z0-9]+)$/i)) {\n      var letters = match[1];\n      for (var i = 0, l = letters.length; i < l; i++) {\n        options[letters[i]] = true;\n      }\n    }\n    else {\n      throw new SyntaxError(\"Malformed option: \" + JSON.stringify(option));\n    }\n  });\n  args = process.argv.slice(first);\n  command = args.shift();\n}());\n\nif (!command || options.h || options.help) {\n  console.error(\"\\n  Usage:  rec [options] command [args...]\\n\");\n  console.error(\"  Options:\\n\");\n  console.error(\"    -j --json        Output JSON format (default)\");\n  console.error(\"    -m --msgpack     Output MsgPack format\");\n  console.error(\"    -g --gzip        Gzip output\");\n  console.error(\"    -p --play        Play back a recording\");\n  console.error(\"    -q --quiet       Suppress message at end\");\n  console.error(\"    -c --clear       Clear screen before starting\");\n  console.error(\"    --name=filename  File to save to (default is 'out')\");\n  console.error();\n  process.exit(-1);\n}\n\nif (options.p || options.play) {\n  require('./play.js')(options, command, args);\n}\nelse {\n  require('./record.js')(options, command, args);\n}\n\n"},"dde726f0b8a18902b8611d8adcbe5a5379bcbc11":{"type":"blob","body":"var childProcess = require('child_process');\n\nmodule.exports = function (options, command, args) {\n\n  var encode, path;\n  (function () {\n    var serialize, name;\n    path = options.name || \"rec\";\n    if (options.json || options.j) {\n      serialize = function (item) {\n        function stringifyContents(item) {\n          if (Array.isArray(item)) return item.map(stringifyContents);\n          if (Buffer.isBuffer(item)) return item.toString();\n          return item;\n        }\n        return JSON.stringify(stringifyContents(item)) + \"\\n\";\n      };\n      path += \".json\";\n    }\n    else {\n      serialize = require('msgpack-js').encode;\n      path += \".msgpack\"\n    }\n    if (options.gzip || options.g) {\n      var gzip = require('zlib').gzip;\n      encode = function (item, callback) {\n        gzip(serialize(item), callback);\n      };\n      path += \".gz\";\n    }\n    else {\n      encode = function (item, callback) {\n        callback(null, serialize(item));\n      };\n    }\n  }());\n\n  // Erase screen and move home\n  process.stdout.write(\"\\u001b[2J\\u001b[H\");\n\n  var child = childProcess.spawn(command, args, {\n    stdio: [0, 'pipe', 'pipe']\n  });\n  child.stdout.on(\"data\", function (chunk) {\n    record(1, chunk);\n    process.stdout.write(chunk);\n  });\n  child.stderr.on(\"data\", function (chunk) {\n    record(2, chunk);\n    process.stderr.write(chunk);\n  });\n\n  // Forward basic signals to child.\n  process.on('SIGINT', function () { child.kill('SIGINT'); });\n  process.on('SIGTERM', function () { child.kill('SIGTERM'); });\n\n  child.on('exit', function (code, signal) {\n    record(3, { code: code, signal: signal });\n  });\n\n  child.on('close', function () {\n    console.log();\n    encode(events, function (err, buffer) {\n      if (err) throw err;\n      require('fs').writeFileSync(path, buffer);\n      if (!(options.q || options.quiet)) {\n        console.log(\"Recording written to \" + path);\n      }\n    });\n  });\n\n  var last = Date.now();\n  var current = [];\n  var events = [current];\n  record(0, {\n    start: last,\n    command: command,\n    args: args,\n    platform: process.platform,\n    arch: process.arch\n  });\n\n  function record(event, value) {\n    var time = Date.now();\n    if (time !== last) {\n      var delta = time - last;\n      last = time;\n      current = [];\n      events.push(delta, current);\n    }\n    current.push(event, value);\n  }\n\n};\n"},"f22cc8f67ae65447bd31c53afa8b0350ccaf9d98":{"type":"blob","body":"var childProcess = require('child_process');\nvar fs = require('fs');\n\nfunction uleb128(num) {\n\n  var bytes = [];\n  while (num > 0x7f) {\n    bytes.push((num & 0x7f) | 0x80);\n    num >>= 7;\n  }\n  bytes.push(num);\n  return new Buffer(bytes);\n}\n\nmodule.exports = function (options, command, args) {\n\n  var path = options.name || \"rec\";\n  if (options.msgpack || options.m) path += \".msgpack\";\n  else path += \".json\";\n  if (options.gzip || options.g) path += \".gz\";\n\n  var file;\n  if (options.s || options.stream) {\n    file = process.stdout;\n  }\n  else {\n    file = fs.createWriteStream(path);\n  }\n  var output = file;\n\n  var write;\n  if (options.msgpack || options.m) {\n    // uleb128 length header framed msgpack\n    var msgpack = require('msgpack-js');\n    write = function (item) {\n      var serialized = msgpack.encode(item);\n\n      output.write(uleb128(serialized.length));\n      return output.write(serialized);\n    };\n  }\n  else {\n    // Newline framed JSON\n    write = function (item) {\n      return output.write(JSON.stringify(item) + \"\\n\");\n    };\n  }\n  if (options.gzip || options.g) {\n    var output = require('zlib').createGzip();\n    output.pipe(file);\n  }\n  // Erase screen and move home\n  if (options.c || options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n\n  var child = childProcess.spawn(command, args, {\n    stdio: [0, 'pipe', 'pipe']\n  });\n  if (!(options.msgpack || options.m)) {\n    child.stdout.setEncoding('utf8');\n    child.stderr.setEncoding('utf8');\n  }\n  child.stdout.on(\"data\", function (chunk) {\n    record(1, chunk);\n    if (!(options.s || options.stream)) {\n      process.stdout.write(chunk);\n    }\n  });\n  child.stderr.on(\"data\", function (chunk) {\n    record(2, chunk);\n    process.stderr.write(chunk);\n  });\n\n  // Forward basic signals to child.\n  process.on('SIGINT', function () { child.kill('SIGINT'); });\n  process.on('SIGTERM', function () { child.kill('SIGTERM'); });\n\n  var left = 2;\n  child.on('exit', function (code, signal) {\n    record(3, { code: code, signal: signal });\n\n  });\n\n  child.on('close', function () {\n    write(current);\n    output.end();\n    if (!(options.q || options.quiet)) {\n      console.error();\n      console.error(\"Recording written to \" + path);\n    }\n  });\n\n  var last = Date.now();\n  var current = [];\n  record(0, {\n    start: last,\n    command: command,\n    args: args,\n    platform: process.platform,\n    arch: process.arch\n  });\n\n  function record(event, value) {\n    var time = Date.now();\n    if (time !== last) {\n      write(current);\n      var delta = time - last;\n      write(delta);\n      last = time;\n      current = [];\n    }\n    current.push(event, value);\n  }\n\n};\n"},"b81cd43e2e300e794f4cc2c6496fa815de4194f1":{"type":"blob","body":"var childProcess = require('child_process');\nvar fs = require('fs');\n\nfunction uleb128(num) {\n\n  var bytes = [];\n  while (num > 0x7f) {\n    bytes.push((num & 0x7f) | 0x80);\n    num >>= 7;\n  }\n  bytes.push(num);\n  return new Buffer(bytes);\n}\n\nmodule.exports = function (options, command, args) {\n\n  var path = options.name || \"rec\";\n  if (options.msgpack || options.m) path += \".msgpack\";\n  else path += \".json\";\n  if (options.gzip || options.g) path += \".gz\";\n  var file = fs.createWriteStream(path);\n  var output = file;\n\n  var write;\n  if (options.msgpack || options.m) {\n    // uleb128 length header framed msgpack\n    var msgpack = require('msgpack-js');\n    write = function (item) {\n      var serialized = msgpack.encode(item);\n\n      output.write(uleb128(serialized.length));\n      return output.write(serialized);\n    };\n  }\n  else {\n    // Newline framed JSON\n    write = function (item) {\n      return output.write(JSON.stringify(item) + \"\\n\");\n    };\n  }\n  if (options.gzip || options.g) {\n    var output = require('zlib').createGzip();\n    output.pipe(file);\n  }\n  // Erase screen and move home\n  if (options.c || options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n\n  var child = childProcess.spawn(command, args, {\n    stdio: [0, 'pipe', 'pipe']\n  });\n  if (!(options.msgpack || options.m)) {\n    child.stdout.setEncoding('utf8');\n    child.stderr.setEncoding('utf8');\n  }\n  child.stdout.on(\"data\", function (chunk) {\n    record(1, chunk);\n    process.stdout.write(chunk);\n  });\n  child.stderr.on(\"data\", function (chunk) {\n    record(2, chunk);\n    process.stderr.write(chunk);\n  });\n\n  // Forward basic signals to child.\n  process.on('SIGINT', function () { child.kill('SIGINT'); });\n  process.on('SIGTERM', function () { child.kill('SIGTERM'); });\n\n  var left = 2;\n  child.on('exit', function (code, signal) {\n    record(3, { code: code, signal: signal });\n\n  });\n\n  child.on('close', function () {\n    write(current);\n    output.end();\n    if (!(options.q || options.quiet)) {\n      console.log();\n      console.log(\"Recording written to \" + path);\n    }\n  });\n\n  var last = Date.now();\n  var current = [];\n  record(0, {\n    start: last,\n    command: command,\n    args: args,\n    platform: process.platform,\n    arch: process.arch\n  });\n\n  function record(event, value) {\n    var time = Date.now();\n    if (time !== last) {\n      write(current);\n      var delta = time - last;\n      write(delta);\n      last = time;\n      current = [];\n    }\n    current.push(event, value);\n  }\n\n};\n"},"551cd893393fd8911eae524bed8bcc4422bd1da8":{"type":"blob","body":"var childProcess = require('child_process');\n\n// Extract options and command to run.\nvar options, command;\n(function () {\n  // Strip out the options and the commands to be run.\n  var first = 2;\n  for (var i = 2, l = process.argv.length; i < l; i++) {\n    if (process.argv[i][0] === '-') first = i + 1;\n  }\n  command = process.argv.slice(first);\n  // Ultra simple option parser\n  options = {};\n  var pattern = /^(?:--([a-zA-Z0-9_][a-zA-Z0-9_-]+)(?:=(.*))?|-([a-zA-Z_]))$/\n  process.argv.slice(2, first).forEach(function (option) {\n    var match = option.match(/^--([a-z][a-z-0-9_-]+)(?:=(.*))?$/i) ||\n                option.match(/^-([a-z])$/i);\n    options[match[1]] = match[2] || true;\n  });\n}());\n\n\nconsole.log(options, command);\n"},"007a1b768dad6a3532a792618326f057eaecb85e":{"type":"blob","body":"var fs = require('fs');\n\nmodule.exports = function (options, path) {\n\n  var file = fs.createReadStream(path);\n  var input = file;\n  if (path.substr(path.length - 3) === \".gz\") {\n    path = path.substr(0, path.length - 3);\n    var input = require('zlib').createGzip();\n    file.pipe(input);\n  }\n\n  var parser;\n  if (path.substr(path.length - 5) === \".json\") {\n    parser = require('./jsonMachine.js');\n  }\n  else if (path.substr(path.length - 8) === \".msgpack\") {\n    parser = require('./msgpackMachine.js');\n  }\n\n  if (options.c || options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n  var target = Date.now();\n  var queue = [];\n  var delay = 0;\n  var done = false;\n  var waiting = null;\n  var meta;\n  input.on(\"data\", parser(function (item) {\n    if (delay === null) {\n      delay = item;\n      return;\n    }\n    queue.push([delay, item]);\n    delay = null;\n    check();\n  }));\n  input.on(\"end\", function () {\n    done = true;\n    check();\n  });\n\n  function check() {\n    var delta, next;\n    while (!waiting && (next = queue.shift())) {\n      target += next[0];\n      delta = target - Date.now();\n      if (delta <= 0) {\n        run(next[1]);\n      }\n      else {\n        waiting = next[1];\n        setTimeout(resume, delta);\n      }\n    }\n    if (done && !waiting && !next) {\n      finish();\n    }\n  }\n\n  function resume() {\n    var item = waiting;\n    waiting = null;\n    run(item);\n    check();\n  }\n\n  function run(items) {\n    for (var i = 0, l = items.length; i < l; i += 2) {\n      var type = items[i];\n      var item = items[i + 1];\n      if (type === 1) process.stdout.write(item);\n      else if (type === 2) process.stderr.write(item);\n      else if (type === 0) meta = item;\n      else if (type === 3) meta.exit = item;\n    }\n  }\n\n  function finish() {\n    if (!(options.q || options.quiet)) {\n      console.log(\"\\nFinished\", meta)\n    }\n  }\n}\n"},"fef25317fc208af9fb815adcf700a1f0dd1f0207":{"type":"blob","body":"var fs = require('fs');\n\nmodule.exports = function (options, path) {\n\n  var file = fs.createReadStream(path);\n  var input = file;\n  if (path.substr(path.length - 3) === \".gz\") {\n    path = path.substr(0, path.length - 3);\n    var input = require('zlib').createGzip();\n    file.pipe(input);\n  }\n\n  var parser;\n  if (path.substr(path.length - 5) === \".json\") {\n    parser = require('./jsonMachine.js');\n  }\n  else if (path.substr(path.length - 8) === \".msgpack\") {\n    parser = require('./msgpackMachine.js');\n  }\n\n  if (options.c || options.clear) {\n    process.stdout.write(\"\\u001b[2J\\u001b[H\");\n  }\n  var target = Date.now();\n  var queue = [];\n  var delay = 0;\n  var done = false;\n  var waiting = null;\n  var meta;\n  input.on(\"data\", parser(function (item) {\n    if (delay === null) {\n      delay = item;\n      return;\n    }\n    queue.push([delay, item]);\n    delay = null;\n    check();\n  }));\n  input.on(\"end\", function () {\n    done = true;\n    check();\n  });\n\n  function check() {\n    var delta, next;\n    while (!waiting && (next = queue.shift())) {\n      target += next[0];\n      delta = target - Date.now();\n      if (delta <= 0) {\n        run(next[1]);\n      }\n      else {\n        waiting = next[1];\n        setTimeout(resume, delta);\n      }\n    }\n    if (done && !waiting && !next) {\n      finish();\n    }\n  }\n\n  function resume() {\n    var item = waiting;\n    waiting = null;\n    run(item);\n    check();\n  }\n\n  function run(items) {\n    for (var i = 0, l = items.length; i < l; i += 2) {\n      var type = items[i];\n      var item = items[i + 1];\n      if (type === 1) process.stdout.write(item);\n      else if (type === 2) process.stderr.write(item);\n      else if (type === 0) meta = item;\n      else if (type === 3) meta.exit = item;\n    }\n  }\n\n  function finish() {\n    if (!(options.q || options.quiet)) {\n      console.error(\"\\nFinished\", meta)\n    }\n  }\n}\n"},"fc87a423c27296c6e09476b45ca82487742f6d15":{"type":"tree","body":[{"mode":33188,"name":".gitignore","hash":"3c3629e647f5ddf82548912e337bea9826b434af"},{"mode":33188,"name":"LICENSE","hash":"b3afc61d9bc521c8b80454608abc8582f18add83"},{"mode":33188,"name":"README.md","hash":"e00e4a02975905d6d732f2d9ab7832fb2ecc6282"},{"mode":33188,"name":"jsonMachine.js","hash":"25ac88270593332e051cad7047a73f41f6a31035"},{"mode":33188,"name":"msgpackMachine.js","hash":"40e2d5f4819e2e3c3303ea9f768855835ccf5e70"},{"mode":33188,"name":"package.json","hash":"b4e4ce0da7bd799a5be5977d90244f73fee040e5"},{"mode":33188,"name":"play.js","hash":"fef25317fc208af9fb815adcf700a1f0dd1f0207"},{"mode":33261,"name":"rec.js","hash":"ea626ff8298a0ccdcd9da14d87c2b2e0b6c21b19"},{"mode":33188,"name":"record.js","hash":"f22cc8f67ae65447bd31c53afa8b0350ccaf9d98"}]}}}